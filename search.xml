<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>操作系统学习</title>
      <link href="/2023/06/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/06/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统学习"><a href="#操作系统学习" class="headerlink" title="操作系统学习"></a>操作系统学习</h1><h2 id="第一章-操作系统概述"><a href="#第一章-操作系统概述" class="headerlink" title="第一章 操作系统概述"></a>第一章 操作系统概述</h2><h3 id="1-1操作系统的概念（定义），功能和目标"><a href="#1-1操作系统的概念（定义），功能和目标" class="headerlink" title="1.1操作系统的概念（定义），功能和目标"></a>1.1操作系统的概念（定义），功能和目标</h3><p>操作系统是1.系统资源（硬件、软件）的管理者，2.向上层（用户和应用程序）提供方便易用的服务，3.是最接近硬件的一层软件</p><h4 id="作为系统资源的管理者"><a href="#作为系统资源的管理者" class="headerlink" title="作为系统资源的管理者"></a>作为系统资源的管理者</h4><p>以qq聊天为例：<br>1.在各个文件夹中找到qq安装的位置-&gt;文件管理功能<br>2.打开qq.exe（需要把该程序相关数据放入内存）-&gt;存储器管理<br>3.qq程序正常运行（对应的进程被处理机处理）-&gt;处理机管理<br>4.开始和朋友视频聊天（需要将摄像头设备分配给进程）-&gt;设备管理</p><h4 id="向上层提供方便易用的服务"><a href="#向上层提供方便易用的服务" class="headerlink" title="向上层提供方便易用的服务"></a>向上层提供方便易用的服务</h4><p>封装思想：用户可以在不知道底层硬件的原理的基础上直接向操作系统发出命令<br>GUI：图形化用户接口<br>联机命令接口=交互式命令接口-&gt;cmd（说一句做一句）<br>脱机命令接口=批处理命令接口-&gt;.bat文件（说一堆做一堆）<br>程序接口：可以在程序中进行系统调用来使用程序接口</p><h4 id="作为最接近硬件的层次"><a href="#作为最接近硬件的层次" class="headerlink" title="作为最接近硬件的层次"></a>作为最接近硬件的层次</h4><p>需要实现对硬件机器的拓展（改造裸机）</p><h3 id="1-2操作系统的四个特征"><a href="#1-2操作系统的四个特征" class="headerlink" title="1.2操作系统的四个特征"></a>1.2操作系统的四个特征</h3><p>并发、共享（两个最基本的特征，两者互为存在条件）、虚拟</p><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>两个或多个事件在同一时间段内发生<br>VS并行：两个或多个事件在同一时刻同时发生<br>操作系统的并发性指计算机系统同时运行多个程序，操作系统和程序并发是一起诞生的<br><strong>注意（考点）</strong>：<br>单核CPU只能并发执行程序<br>多核CPU可以并行执行程序</p><h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><p>资源共享，系统中的资源可供内存中多个并发执行的进程共同使用。<br>互斥共享方式：一个时间段内只允许一个进程访问该资源。<br>例子：不能同时使用微信和qq的视频聊天<br>同时共享方式：允许一个时间段内由多个进程“同时”对它们进行访问<br>例子：可以同时用qq和微信发文件。宏观上他们在同时发送，微观上他们是在交替访问硬盘。</p><h4 id="并发和共享的关系"><a href="#并发和共享的关系" class="headerlink" title="并发和共享的关系"></a>并发和共享的关系</h4><p>以上面的例子：如果失去并发性，则系统中只有一个程序正在运行，则共享性失去了存在的意义。如果失去了共享性，则qq和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发。</p><h4 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h4><p>把一个物理实体变为若干个逻辑上的对应物<br>例子：1.电脑的运存为4GB但是可以运行总共加起来超过4GB的应用<br>这是虚拟存储器技术，空分复用技术。<br>2.单核CPU的计算机打开了多个软件<br>这是虚拟处理器技术，时分复用技术<br><strong>没有并发性就谈不上虚拟性</strong></p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>多道程序环境下，允许多个程序并发执行，他们会争抢着使用系统资源，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进<br>只有系统拥有并发性，才有可能导致异步性</p><h3 id="1-3操作系统的发展与分类"><a href="#1-3操作系统的发展与分类" class="headerlink" title="1.3操作系统的发展与分类"></a>1.3操作系统的发展与分类</h3><p><strong>注意</strong>各类操作系统主要想解决什么问题，各自的优缺点</p><h4 id="手工操作阶段"><a href="#手工操作阶段" class="headerlink" title="手工操作阶段"></a>手工操作阶段</h4><p>主要缺点：用户独占全机，人机速度矛盾导致资源利用率极低（人操作很慢，计算机操作很快）</p><h4 id="单道批处理系统"><a href="#单道批处理系统" class="headerlink" title="单道批处理系统"></a>单道批处理系统</h4><p>引入脱机输入/输出技术（用外围机+磁带完成），并由监督程序负责控制作业的输入、输出<br>主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升<br>主要缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序，CPU有大量的时间是在空闲等待I/O完成。资源利用率依然很低。</p><h4 id="多道批处理系统"><a href="#多道批处理系统" class="headerlink" title="多道批处理系统"></a>多道批处理系统</h4><p>操作系统正式诞生，每次往内存中读入多道程序<br>主要优点：多道程序并发执行，共享计算机资源，资源利用率大幅提升，CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大<br>主要缺点：用户响应时间长，没有人机交互功能（用户只能干等计算机处理）</p><h4 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h4><p>计算机以时间片为单位轮流为各个用户/作业服务，各个用户通过终端与计算机交互<br>主要优点：用户请求可以被及时响应，解决了人机交互问题，允许多个用户同时使用一台计算机，用户对计算机的操作相互独立、<br>主要缺点：不能优先处理紧急任务</p><h4 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h4><p>能优先相应。计算机系统接收到信号后要及时处理，在严格的时限内处理完事件。（及时性、可靠性）<br>硬实时：导弹控制系统<br>软实时：12306火车订票</p><h3 id="1-4操作系统的运行机制"><a href="#1-4操作系统的运行机制" class="headerlink" title="1.4操作系统的运行机制"></a>1.4操作系统的运行机制</h3><h4 id="内核程序vs应用程序"><a href="#内核程序vs应用程序" class="headerlink" title="内核程序vs应用程序"></a>内核程序vs应用程序</h4><p>普通程序员写的是应用程序<br>操作系统公司写的是内核程序，内核程序组成了操作系统内核<br>内核时操作系统的核心，最接近硬件</p><h4 id="特权指令vs非特权指令"><a href="#特权指令vs非特权指令" class="headerlink" title="特权指令vs非特权指令"></a>特权指令vs非特权指令</h4><p>应用程序只能使用非特权指令，内核可以使用特权指令<br>在CPU设计和生产的时候就划分了特权指令和非特权指令，因此CPU执行一条指令前就能判断出其类型</p><h4 id="内核态vs用户态"><a href="#内核态vs用户态" class="headerlink" title="内核态vs用户态"></a>内核态vs用户态</h4><p>处于内核态，说明正在运行内核程序<br>……<br>CPU中有个叫程序状态字寄存器的(PSW)可以标识状态<br>内核态=核心态=管态，用户态=目态</p><h4 id="内核态、用户态的切换"><a href="#内核态、用户态的切换" class="headerlink" title="内核态、用户态的切换"></a>内核态、用户态的切换</h4><p>刚开机时为内核态<br>用户启动某个应用程序时内核程序用一条特权指令把PSW标志位设置成用户态<br>当用户输入一条特权指令时CPU会判断这个事件非法，随后引发一个中断信号<br>CPU变回核心态并开始执行处理中断的指令<br>处理完成后又把使用权交给别的应用程序<br>内核态-&gt;用户态：执行一条特权指令——修改PSW标志位为用户态，操作系统主动让出CPU使用权<br>用户态-&gt;内核态：由中断引发，硬件自动完成变态过程，操作系统强行夺回CPU使用权</p><h3 id="1-5中断和异常"><a href="#1-5中断和异常" class="headerlink" title="1.5中断和异常"></a>1.5中断和异常</h3><h4 id="中断的作用"><a href="#中断的作用" class="headerlink" title="中断的作用"></a>中断的作用</h4><p>中断是让操作系统内核夺回CPU使用权的唯一途径（没有中断就没有并发）</p><h4 id="内中断（异常）vs外中断（中断）"><a href="#内中断（异常）vs外中断（中断）" class="headerlink" title="内中断（异常）vs外中断（中断）"></a>内中断（异常）vs外中断（中断）</h4><p>内中断：中断信号来源于CPU内部（与当前指令有关）<br>指令非法、陷入指令（系统调用通过陷入指令完成，不是特权指令）<br>陷阱、陷入（trap）：由陷入指令引发，应用程序故意引发的<br>故障（fault）：由错误条件引起，可以被内核程序修复，CPU使用权可以被还给该应用程序<br>终止（abort）：由致命错误引起，内核程序无法修复，会直接终止该应用程序<br>外中断：中断信号来源于CPU外部（与当前指令无关）<br>时钟中断：由时钟部件每隔一个时间片发送一个中断信号<br>I/O中断：由输入/输出设备发来的中断信号</p><h4 id="中断机制的基本原理"><a href="#中断机制的基本原理" class="headerlink" title="中断机制的基本原理"></a>中断机制的基本原理</h4><p>不同的中断信号，需要用不同的中断处理程序来处理（中断向量表）<br><strong>注意</strong>中断处理程序一定是内核程序，需要运行在内核态</p><h3 id="1-6系统调用"><a href="#1-6系统调用" class="headerlink" title="1.6系统调用"></a>1.6系统调用</h3><p>应用程序可以通过系统调用来请求获得操作系统内核的服务</p><h4 id="系统调用vs库函数"><a href="#系统调用vs库函数" class="headerlink" title="系统调用vs库函数"></a>系统调用vs库函数</h4><p>有的库函数涉及系统调用有的不涉及</p><h4 id="为什么系统调用是必须的"><a href="#为什么系统调用是必须的" class="headerlink" title="为什么系统调用是必须的"></a>为什么系统调用是必须的</h4><p>如果两个进程可以随意地、并发地共享资源，那两个进程就会混杂在一起<br>解决方法：由操作系统内核对共享资源进行统一的管理，并向上提供“系统调用”，用户只能通过系统调用发出请求，内核会进行协调</p><h4 id="什么功能要用到系统调用"><a href="#什么功能要用到系统调用" class="headerlink" title="什么功能要用到系统调用"></a>什么功能要用到系统调用</h4><p>凡是与共享资源有关的操作（存储分配、I/O设备、文件管理等）。</p><h4 id="系统调用的过程"><a href="#系统调用的过程" class="headerlink" title="系统调用的过程"></a>系统调用的过程</h4><p>传递系统调用参数-&gt;执行陷入指令（<strong>用户态</strong>）-&gt;执行相应的内请求核程序处理系统调用（核心态）-&gt;返回应用程序</p><h3 id="1-7操作系统的体系结构"><a href="#1-7操作系统的体系结构" class="headerlink" title="1.7操作系统的体系结构"></a>1.7操作系统的体系结构</h3><h4 id="大内核vs微内核"><a href="#大内核vs微内核" class="headerlink" title="大内核vs微内核"></a>大内核vs微内核</h4><p>大内核：内核中不但包括了时钟管理、中断处理、原语（执行了就不能停）还有进程管理、存储器管理、设备管理等功能<br>优点：高性能<br>缺点：内核代码庞大，结构混乱，难以维护<br>微内核：将后面的功能放到了用户态执行<br>优点：功能少，结构清晰，方便维护<br>缺点：需要频繁地在核心态和用户态之间切换，性能低<br>当应用程序需要执行进程管理、存储管理和设备管理时大内核要两次变态，微内核要六次</p><h4 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h4><p>内核分多层，每层可单向调用更低一层提供的接口<br>优点：便于调试和验证，易于扩充和维护<br>缺点：仅可调用相邻的低一层，效率低，不可跨层调用，系统调用执行时间长</p><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>把内核划分为多个模块，内核=主模块+可加载内核模块<br>主模块：只负责核心功能：进程调度、内存管理<br>可加载内核模块：可以动态加载新模块到内核，无需重新编译整个内核<br>优点：模块之间逻辑清晰易于维护，确定模块之间的接口就可以多个模块一起开发。支持动态加载新的内核模块（安装设备驱动程序），增强适应性。任何模块之间都可以直接调用其他模块，效率高<br>缺点：模块间的接口定义未必是合理实用的，模块间相互依赖，难以调试和验证</p><h4 id="外核"><a href="#外核" class="headerlink" title="外核"></a>外核</h4><p>内核负责进程调度、进程通信等功能，外核负责为用户进程分配未经抽象的硬件资源，且保证资源使用安全<br>优点：外核可直接给用户进程分配“不虚拟、不抽象”的硬件资源，使用户可以更灵活的使用硬件资源。减少了虚拟硬件资源的“映射层”，提高效率<br>缺点：降低了系统的一致性，使系统变得复杂</p><h3 id="1-8操作系统引导"><a href="#1-8操作系统引导" class="headerlink" title="1.8操作系统引导"></a>1.8操作系统引导</h3><p>开机的时候，怎么让操作系统运行起来</p><h4 id="安装了操作系统之后"><a href="#安装了操作系统之后" class="headerlink" title="安装了操作系统之后"></a>安装了操作系统之后</h4><p>在磁盘的开头部分会有主引导记录MBR（包含磁盘引导程序和分区表）<br>C盘是这个硬盘的活动分区，安装了操作系统。C盘中有引导记录PBR（负责找到启动管理器）和根目录</p><h4 id="操作系统引导（开机过程）"><a href="#操作系统引导（开机过程）" class="headerlink" title="操作系统引导（开机过程）"></a>操作系统引导（开机过程）</h4><p>1.CPU从一个特点主存地址开始，取指令，执行ROM中的引导程序<br>2.将磁盘的第一块——主引导记录，读入内存，执行磁盘引导程序，扫描分区表<br>3.从活动分区（安装了操作系统的分区）读入分区引导记录，执行其中的程序<br>4.从根目录下找到完整的操作系统初始化程序（启动管理器）并执行，完成开机</p><h3 id="1-9虚拟机"><a href="#1-9虚拟机" class="headerlink" title="1.9虚拟机"></a>1.9虚拟机</h3><h4 id="传统计算机"><a href="#传统计算机" class="headerlink" title="传统计算机"></a>传统计算机</h4><p>一台物理机器上只能运行一个操作系统</p><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h4><p>使用虚拟化技术，将一台物理机器虚拟化为多台虚拟机器，每个虚拟机器都可以独立运行一个操作系统<br>虚拟机管理程序=虚拟机监控程序=VMM=Hypervisor<br>第一类VMM，直接运行在硬件上<br>第二类VMM，运行在宿主操作系统上<br><img src="/img/%E4%B8%A4%E4%B8%AAVMM%E5%AF%B9%E6%AF%94.png" alt="这是图片" title="Magic Gardens"></p><h2 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h2><h3 id="1-1进程的概念、组成和特征"><a href="#1-1进程的概念、组成和特征" class="headerlink" title="1.1进程的概念、组成和特征"></a>1.1进程的概念、组成和特征</h3><h4 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h4><p>程序是静态的，是存放在磁盘里的可执行文件，就是一系列的指令集合<br>进程是动态的，是程序的一次执行过程（同一个程序多次执行会对应多个进程）</p><h4 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h4><p>进程描述信息：<br>当进程被创建的时候，操作系统会为该进程分配一个PID<br>进程所属用户ID（UID）<br>资源分配清单：<br>给进程分配了哪些资源<br>进程控制和管理信息：<br>进程的运行情况<br>处理机信息<br>这些信息都被保存再一个数据结构PCB（进程控制块）中<br>PCB是进程存在的唯一标志，当进程被创建时，操作系统为其创建PCB，当进程结束时，会回收其PCB（是给操作系统用的）</p><p>程序段<br>包含程序指令</p><p>数据段<br>包含运行过程中产生的各种数据<br>程序段和数据段是给进程自己用的</p><h4 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h4><p>动态性：（最基本的特性）进程是程序的一次执行过程，是动态的产生、变化和消亡的<br>并发性：内存中有多个进程实体，各进程可并发执行<br>独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位<br>异步性：（会导致并发程序执行结果的不确定性）各进程按各自独立的、不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题<br>结构性：每个进程都会配置PCB。结构上看，进程由程序段、数据段、PCB组成</p><h3 id="1-2进程的状态与转换"><a href="#1-2进程的状态与转换" class="headerlink" title="1.2进程的状态与转换"></a>1.2进程的状态与转换</h3><h4 id="进程的状态——创建态、就绪态、运行态、阻塞态、终止态"><a href="#进程的状态——创建态、就绪态、运行态、阻塞态、终止态" class="headerlink" title="进程的状态——创建态、就绪态、运行态、阻塞态、终止态"></a>进程的状态——创建态、就绪态、运行态、阻塞态、终止态</h4><p>PCB会有一个变量state来标识进程的当前状态<br>正在创建是创建态，操作系统为进程分配资源、初始化PCB<br>创建完成是就绪态，已经有运行条件，但没有空闲CPU所以不能运行<br>开始运行是运行态，当CPU空闲时选择一个就绪进程<br>等待事件是阻塞态，运行时会请求等待某个事件的发生，发生之前会阻塞<br>终止进程时终止态，进程执行exit系统调用，请求操作系统终止该进程</p><h4 id="进程状态的转换"><a href="#进程状态的转换" class="headerlink" title="进程状态的转换"></a>进程状态的转换</h4><p><img src="/img/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81.png" alt="这是图片" title="Magic Gardens"></p><h4 id="进程的组织——链接方式、索引方式"><a href="#进程的组织——链接方式、索引方式" class="headerlink" title="进程的组织——链接方式、索引方式"></a>进程的组织——链接方式、索引方式</h4><p>链接：<br>执行指针：指向当前处于运行态的进程<br>就绪队列指针：会把优先级高的进程放在队头<br>阻塞队列指针：有可能因为阻塞原因分多个阻塞队列<br>索引：<br>建立索引表，表项执行PCB</p><h3 id="1-3进程控制"><a href="#1-3进程控制" class="headerlink" title="1.3进程控制"></a>1.3进程控制</h3><p>实现进程的状态转换</p><h4 id="如何实现进程控制"><a href="#如何实现进程控制" class="headerlink" title="如何实现进程控制"></a>如何实现进程控制</h4><p>用原语实现（原子性，一气呵成）<br><strong>如果不能一气呵成可能导致PCB的state已经变成了1（就绪态）但整个PCB还在阻塞队列中</strong><br>用关中断指令和开中断指令（特权指令）实现原子性，关中断指令会使CPU不在执行指令时检查中断信号，直到执行开中断指令</p><h4 id="进程控制相关的原语"><a href="#进程控制相关的原语" class="headerlink" title="进程控制相关的原语"></a>进程控制相关的原语</h4><p>进程创建：<br>创建原语（创建态-&gt;就绪态）（用户登录、作业调度、提供服务、应用请求）<br>进程终止：<br>撤销原语（xxx-&gt;终止态-&gt;无）（正常结束、异常结束、外界干预）<br>进程阻塞：<br>阻塞原语（运行-&gt;阻塞）（需要等待系统分配某种资源、需要等待相互合作的其他进程完成工作）<br>进程唤醒：<br>唤醒原语（阻塞-&gt;就绪）（等待的事件发生了）<br>进程切换：<br>切换原语（运行-&gt;就绪/就绪-&gt;运行）（当前进程时间片到、有更高优先级的进程到达、当前进程主动阻塞、当前进程终止）<br><strong>当一个进程需要下CPU的时候要将自己的环境（运行到哪一步了，数值怎么样了）存入PCB</strong></p><h3 id="1-4进程通信（IPC）"><a href="#1-4进程通信（IPC）" class="headerlink" title="1.4进程通信（IPC）"></a>1.4进程通信（IPC）</h3><p>指两个进程之间产生数据交互（分享链接）</p><h4 id="进程通信需要操作系统支持"><a href="#进程通信需要操作系统支持" class="headerlink" title="进程通信需要操作系统支持"></a>进程通信需要操作系统支持</h4><p>进程时分配系统资源的单位，因此各进程拥有的内存地址空间相互独立，为了保证安全，一个进程不能直接访问另一个进程的地址空间</p><h4 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h4><p>设置一个多个进程能共享的区域，用这个区域实现通信<br>shm_open（）//申请一片共享存储区<br>mmap（）//将共享内存区映射到进程自己的地址空间<br>各个进程对共享空间的访问应该是互斥的<strong>由通信进程自己负责实现互斥</strong>（P、V操作）<br>是基于存储区的共享，数据的形式、存放位置都是由通信进程控制，速度快是一种高级通信方式<br><strong>vs</strong>基于数据结构的共享：<br>共享空间里只能放一个长度为10的数组，速度慢是一种低级通信方式</p><h4 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h4><p>进程间的数据交换以格式化的消息（消息头+消息）为单位，通过发送消息/接收消息两个原语进行数据交换<br>send(Q,msg),receive(P,&amp;msg)<br>直接通信方式：消息发送进程要指明接收进程的ID<br>操作系统在直到要发消息给Q后在Q的PCB中添加消息队列<br>间接通信方式：通过信箱间接通信<br>原语中指明信箱</p><h4 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h4><p>管道是单向的，管道是一种特殊的共享文件，又名pipe文件，是在内存中开辟一个大小固定的内存缓冲区<br>管道只能采用半双工通信，只能实现单向传输，如果要双向同时通信要设置两个管道<br>各进程要互斥的访问管道（<strong>由操作系统实现</strong>）<br>管道满时写进程阻塞，管道空时读进程阻塞</p><blockquote><p>因为当管道中的数据被读出时就彻底消失了，所以当多个进程读一个管道时可能会出错<br>解决方案：<br>1.一个管道允许多个写进程，一个读进程<br>2.允许多个写进程，多个读进程，但系统会让各个读进程轮流从管道中读取数据（linux）</p></blockquote><h3 id="1-5线程概念"><a href="#1-5线程概念" class="headerlink" title="1.5线程概念"></a>1.5线程概念</h3><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>有的进程要同时做很多事情，而传统的进程只能串行地执行一系列程序。为此，引入了线程来增加并发度<br>线程是程序执行流地最小单位，进程内的各线程可以并发执行，引入线程后进程只作为除CPU之外的系统资源的分配单元</p><h4 id="引入线程后，有什么变化"><a href="#引入线程后，有什么变化" class="headerlink" title="引入线程后，有什么变化"></a>引入线程后，有什么变化</h4><p>资源分配、调度：<br>传统的进程机制中，进程是资源分配、调度的基本单位<br>引入线程后，进程是资源分配的基本单位，线程是调度的基本单位<br>并发性：<br>传统进程机制中，只能进程间并发<br>引入线程后，各线程间也能并发<br>系统开销：<br>传统的进程间并发，需要切换进程的运行环境，开销大<br>线程间并发，如果是同一进程内的线程切换，则不需要切换进程环境，开销小</p><h4 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h4><p>线程是处理机调度的单位<br>多个CPU中，各个线程可占用不同的CPU<br>每个线程都有一个线程ID、线程控制块（TCB）<br>线程有就绪、阻塞、运行三种状态<br>线程几乎不拥有系统资源<br>同一进程的不同线程间共享进程的资源<br>由于共享内存地址空间，同一进程中的线程间通信设置无需系统干预<br>同一进程中的线程切换，不会引起进程切换<br>不同进程中的线程切换，会引起进程切换<br>切换同进程的线程，系统开销小<br>切换进程，系统开销大</p><h3 id="1-6线程的实现方式多线程模型"><a href="#1-6线程的实现方式多线程模型" class="headerlink" title="1.6线程的实现方式多线程模型"></a>1.6线程的实现方式多线程模型</h3><h4 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h4><p>用户级线程：<br>早期的操作系统不支持线程，当时的线程是由线程库实现的<br>线程的管理工作由应用程序操控线程库完成的<br>线程切换在用户态下就能完成<br>操作系统看不到用户级线程<br>优缺点：<br>优点：用户级线程的切换在用户空间内完成，不需要切换到核心态，开销小<br>缺点：当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高，多个线程不可在多核处理机上并行运行<br>内核级线程：<br>线程管理工作由操作系统完成<br>线程切换需要变态<br>操作系统能意识到线程的存在<br>优缺点：<br>优点:当以恶搞进程被阻塞后，别的线程还可以执行，并发性强<br>缺点：一个用户进程会占用多个内核级线程，线程切换由操作系统完成，开销大</p><h4 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h4><p>在支持内核级线程的系统中，根据用户级线程核内核级线程的映射关系，可以划分为几种多线程模型<br>一对一模型：<br>一个用户级线程映射到一个内核级线程。每个用户进程由于用户级线程同数量的内核级线程<br>优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强<br>缺点：开销大<br>多对一模型：<br>多个用户级线程映射到一个内核级线程<br>优点：开销小<br>缺点：一个用户级线程被阻塞后，整个进程都会被阻塞，并发性不高<br><strong>注意</strong>操作系统只看得见内核级线程，因此只有内核级线程才是处理机分配的单位<br>多对多模型：<br>n用户级线程映射到m个内核级线程（n&gt;=m）。克服了多对一模型并发度不高的缺点，以及一对一模型中一个用户进程占用太多内核级线程开销大的缺点<br>用户级线程是代码逻辑的载体<br>内核级线程是运行机会的载体<br>内核级线程才是处理机分配的单位<br>内核级线程中可以运行任意一个有映射关系的用户级线程，只有两个内核级线程中正在运行的代码被阻塞时才会被阻塞</p><h3 id="1-7线程的状态与转换"><a href="#1-7线程的状态与转换" class="headerlink" title="1.7线程的状态与转换"></a>1.7线程的状态与转换</h3><p>基本同进程</p><h3 id="1-8线程的组织与控制"><a href="#1-8线程的组织与控制" class="headerlink" title="1.8线程的组织与控制"></a>1.8线程的组织与控制</h3><p>TCB线程控制块<br>TID-&gt;与PID类似<br>程序计数器PC-&gt;线程目前执行到哪里<br>其他寄存器-&gt;线程运行的中间结果<br>堆栈指针-&gt;堆栈保存函数调用学习，局部变量等<br>线程运行状态-&gt;运行/就绪/阻塞<br>优先级-&gt;线程调度、资源分配的参考<br>可将多个TCP组织成线程表</p><h3 id="1-9处理机调度"><a href="#1-9处理机调度" class="headerlink" title="1.9处理机调度"></a>1.9处理机调度</h3><p>当有一堆任务要处理，但资源有限，没法同时处理，这就需要确定某种规则（例如先到先得、vip等）来决定处理这些任务的顺序，这就是调度研究的问题</p><h4 id="调度的三个层次——高级调度（作业调度）"><a href="#调度的三个层次——高级调度（作业调度）" class="headerlink" title="调度的三个层次——高级调度（作业调度）"></a>调度的三个层次——高级调度（作业调度）</h4><p>作业：一个具体的任务<br>内存空间有限，没办法将用户提供的作业全部放入内存于是便有了高级调度。解决了好几个程序需要启动，到底先启动哪个。</p><h4 id="低级调度（进程调度-处理机调度）"><a href="#低级调度（进程调度-处理机调度）" class="headerlink" title="低级调度（进程调度/处理机调度）"></a>低级调度（进程调度/处理机调度）</h4><p>按照某种策略从就绪队列中选取一个进程，将处理机分配给他<br>最基本的一种调度，频率高</p><h4 id="中级调度（进程调度）"><a href="#中级调度（进程调度）" class="headerlink" title="中级调度（进程调度）"></a>中级调度（进程调度）</h4><p>内存不足时，可将某些进程的数据调出外存。等之后再重新调入内存。被调到外村的进程状态叫做挂起状态，这些进程的呃PCB会被组织成挂起队列<br>按照某种策略决定将哪个处于挂起状态的内存调入内存<br>频率比高级调度更高</p><h4 id="挂起态与七状态模型"><a href="#挂起态与七状态模型" class="headerlink" title="挂起态与七状态模型"></a>挂起态与七状态模型</h4><p><img src="/img/%E4%B8%83%E7%8A%B6%E6%80%81%E6%A8%A1%E5%9E%8B.png" alt="这是图片" title="Magic Gardens"></p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="/img/%E8%B0%83%E5%BA%A6%E5%AF%B9%E6%AF%94.png" alt="这是图片" title="Magic Gardens"></p><h3 id="1-10进程调度的时机、切换与过程、调度方式"><a href="#1-10进程调度的时机、切换与过程、调度方式" class="headerlink" title="1.10进程调度的时机、切换与过程、调度方式"></a>1.10进程调度的时机、切换与过程、调度方式</h3><h4 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h4><p>当前运行的进程主动放弃处理机<br>当前运行的进程被动放弃处理机<br>不能进行进程调度与切换的的情况：<br>1.在处理中断的过程中。<br>2.进程在操作系统内核程序临界区中<br>3.在原子操作过程中（原语）<br><strong>临界资源</strong>：一个时间段内只允许一个进程使用的资源，各进程需要互斥地访问临界资源<br><strong>临界区</strong>：访问临界资源的那段代码<br><strong>内核程序临界区</strong>：用来访问某种内核数据结构，比如进程的就绪队列<br>进程在操作系统内核临界区中不能进行调度和切换</p><h4 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h4><p>非抢占式：只允许主动放弃处理机。实现简单，适合早期的批处理系统<br>抢占式：可以被更紧急的任务剥夺。可以优先处理，适合分时操作系统、实时操作系统</p><h4 id="进程的切换与过程"><a href="#进程的切换与过程" class="headerlink" title="进程的切换与过程"></a>进程的切换与过程</h4><p>狭义的进程调度指的是从有序队列中选中一个要运行的进程（这个进程可以是刚刚被暂停执行的进程，也可能是另一个进程，后一种情况需要进程切换）<br>进程切换是指一个进程让出处理机，由另一个进程占用处理机的过程<br>广义的进程调度包含了选择一个进程和进程切换两个步骤<br>进程切换是有代价的，所以不能频繁进行进程调度</p><h3 id="1-11调度器-调度程序"><a href="#1-11调度器-调度程序" class="headerlink" title="1.11调度器/调度程序"></a>1.11调度器/调度程序</h3><p>调度程序决定让谁运行（调度算法），运行多长时间（时间片大小）<br>什么事件会触发调度程序：<br>创建新进程<br>进程退出<br>运行进程阻塞<br>I/O中断发生<br>非抢占式调度策略，只有运行程序阻塞或退出才触发调度程序工作<br>抢占式调度策略，每个时钟中断或每k个时钟中断会触发调度程序工作<br>支持线程时调度就会发生于线程</p><p>闲逛进程<br>没有就绪进程时运行闲逛进程<br>优先级低、可以是0指令，占一个完整的指令周期、能耗低</p><h3 id="1-12调度算法的评价指标"><a href="#1-12调度算法的评价指标" class="headerlink" title="1.12调度算法的评价指标"></a>1.12调度算法的评价指标</h3><h4 id="CPU利用率"><a href="#CPU利用率" class="headerlink" title="CPU利用率"></a>CPU利用率</h4><p>指CPU“忙碌”的时间占总时间的比例<br>利用率=忙碌时间/总时间</p><h4 id="系统吞吐量"><a href="#系统吞吐量" class="headerlink" title="系统吞吐量"></a>系统吞吐量</h4><p>单位时间内完成作业的数量<br>系统吞吐量=总共完成了多少作业/总共花了多少时间</p><h4 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h4><p>从作业被提交给系统开始，到作业完成为止的这段时间的间隔<br>包括四个部分：作业在外存后备队列上等待作业调度的时间（一次）、进程在就绪队列上等待进程调度的时间（就绪态）、进程在CPU上执行的时间（运行态）、进程等待I/O操作完成的时间（阻塞态）<br>作业周转时间=作业完成时间-作业提交时间<br>平均周转时间<br>带权周转时间=作业周转时间/作业实际运行时间=作业完成时间-作业提交时间/作业实际运行的时间（越小客户满意度越高）<br>平均带权周转时间</p><h4 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h4><p>进程/作业处于等待处理机状态时间之和<br>在等待I/O完成的期间不能算<br>对于作业来说，不仅要考虑建立进程后的等待时间，还要加上作业在外存后备队列中等待的时间</p><h4 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h4><p>用户提出请求到首次产生响应所用的时间</p><h3 id="1-13调度算法"><a href="#1-13调度算法" class="headerlink" title="1.13调度算法"></a>1.13调度算法</h3><h4 id="先来先服务FCFS"><a href="#先来先服务FCFS" class="headerlink" title="先来先服务FCFS"></a>先来先服务FCFS</h4><p>算法思想：主要从公平的角度考虑<br>算法规则：按照作业/进程到达的先后顺序进行服务<br>用于作业/进程调度：用于作业调度时，考虑的是哪个作业先到达后备队列；用于进程调度时，考虑的是哪个进程先到达就绪队列<br>是否可抢占：非抢占式算法<br>优缺点：优点：公平、算法实现简单。缺点：排在长时间进程后面的短作业需要等待很长时间，带权周转时间长，对长作业有利，短作业不利<br>是否会导致饥饿（得不到服务）：不会</p><h4 id="短作业优先算法SJF"><a href="#短作业优先算法SJF" class="headerlink" title="短作业优先算法SJF"></a>短作业优先算法SJF</h4><p>算法思想：追求最少的平均等待时间，最少的平均周转时间、最少的平均带权周转时间<br>算法规则：最短的（服务时间最短）作业/进程优先得到服务<strong>会在当前已到达的作业/进程中选择</strong><br>用于作业/进程调度：用于进程调度时称作短进程优先算法SPF<br>是否可抢占：是非抢占式算法，但也有抢占式版本——最短剩余时间优先算法SRTN<br><strong>注意</strong>题目中未特别说明，所提到的短作业优先算法默认是非抢占式的。在所有进程同时可运行时，采用SJF调度算法的平均等待时间、平均周转时间最少。不加上述条件的话SRNT算法最少<br>优缺点：优点：“最短的”平均等待时间、平均周转时间。缺点：不公平。对短作业有利，对长作业不利。可能产生饥饿现象。另外，作业/进程的运行时间是由用户提供的，并不一定真实，不一定能做到真正的短作业优先<br>是否会导致饥饿（得不到服务）：会。如果源源不断地有短作业/进程进来，可能使长作业/进程长时间得不到服务，产生饥饿现象。如果一直得不到服务就成为饿死</p><h4 id="FCFS-VS-SJF"><a href="#FCFS-VS-SJF" class="headerlink" title="FCFS VS SJF"></a>FCFS VS SJF</h4><p>FCFS是选择一个等待时间最长地作业，导致了对短作业不友好<br>SJF是选择一个执行时间最短地作业，导致了对长作业不友好，甚至导致了饥饿问题<br>——&gt;高响应比优先算法</p><h4 id="高响应比优先算法HRRN"><a href="#高响应比优先算法HRRN" class="headerlink" title="高响应比优先算法HRRN"></a>高响应比优先算法HRRN</h4><p>算法思想：要综合考虑作业/进程的等待时间和要求服务的时间<br>算法规则：在每次调度时先计算各个作业/进程的响应比，选择响应比最高的作业/进程为其服务。<strong>响应比=等待时间+要求服务时间/要求服务时间</strong><br>用于作业/进程调度：都可用<br>是否可抢占：非抢占式的。<br>优缺点：<br>是否会导致饥饿：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE3</title>
      <link href="/2023/04/25/vue3/"/>
      <url>/2023/04/25/vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE模板语法"><a href="#VUE模板语法" class="headerlink" title="VUE模板语法"></a>VUE模板语法</h1><p>1.插值语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>msg是js中的表达式。一般可以通过插值来动态设置文本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            msg:&quot;xxx&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.原始HTML<br>双大括号只能解释成普通文本，需要用<strong>v-html</strong>输出html数据比如超链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-html=&quot;rawhtml&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            rawhtml:&quot;&lt;a href=&#x27;http://xxxxx.com&#x27;&gt;标签&lt;/a&gt;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3.属性Attribute<br>双大括号不能再HTML属性中使用，要使用<strong>v-bind</strong>指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-bind:id=&#x27;dynamicID&#x27;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            dynamicID:1001</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>v-bind：可以简写为 ：</p></blockquote><p>4.使用JS表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; num+10 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            num:10</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>页面中就会返回一个20<br><strong>注意</strong>：只能是<strong>单个</strong>表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;var a = 1&#125;&#125;</span><br></pre></td></tr></table></figure><p>这是语句所以不行</p><h1 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h1><p>1.要用到data选项来申明响应式的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            num:1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.声明方法要用到methods选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            num:1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;，</span><br><span class="line">    methods：&#123;</span><br><span class="line">        increment()&#123;</span><br><span class="line">            this.num++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>this永远指向组件实例<br>方法也和数据一样能够被模板访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;increment&quot;&gt;&#123;&#123; num &#125;&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>increment方法会在button被点击的时候触发</p><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      author: &#123;</span><br><span class="line">        name: &#x27;John Doe&#x27;,</span><br><span class="line">        books: [</span><br><span class="line">          &#x27;Vue 2 - Advanced Guide&#x27;,</span><br><span class="line">          &#x27;Vue 3 - Basic Guide&#x27;,</span><br><span class="line">          &#x27;Vue 4 - The Mystery&#x27;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Has published books:&lt;/p&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      author: &#123;</span><br><span class="line">        name: &#x27;John Doe&#x27;,</span><br><span class="line">        books: [</span><br><span class="line">          &#x27;Vue 2 - Advanced Guide&#x27;,</span><br><span class="line">          &#x27;Vue 3 - Basic Guide&#x27;,</span><br><span class="line">          &#x27;Vue 4 - The Mystery&#x27;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 一个计算属性的 getter</span><br><span class="line">    publishedBooksMessage() &#123;</span><br><span class="line">      // `this` 指向当前组件实例</span><br><span class="line">      return this.author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Has published books:&lt;/p&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123; publishedBooksMessage &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>publishedBooksMessage是一个计算属性，会随着books数组的改变而改变</p><h1 id="类与样式绑定"><a href="#类与样式绑定" class="headerlink" title="类与样式绑定"></a>类与样式绑定</h1><p>1.绑定HTML class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>active是否存在取决于isActive的真假值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  class=&quot;static&quot;</span><br><span class="line">  :class=&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span><br><span class="line">&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>data状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    isActive: true,</span><br><span class="line">    hasError: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果会变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;static active&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2.绑定数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    activeClass: &#x27;active&#x27;,</span><br><span class="line">    errorClass: &#x27;text-danger&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><p><strong>v-if</strong>指令的内容只会在表达式返回true时被渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-if=&quot;flag&quot;&gt;xxx&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        flag:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样页面中就会渲染出xxx</p><p><strong>v-else</strong>if的else块，如果flag为flase就显示else的内容</p><p><strong>v-show</strong>与<strong>v-if</strong>的区别：<br>v-show会在DOM渲染中保留该元素（隐藏），v-show仅切换了该元素上的display的css属性v-show不支持再template元素上使用，也不能与v-else搭配。<br>v-if会在false时直接把元素删除。<br>v-if有较高的切换开销，v-show有较高的初始渲染开销</p><h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><p>v-for把一个数组显示在页面上<br>语法：item in items<br>items是源数据数组，item是元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in newsList&quot;&gt;</span><br><span class="line">        &#123;&#123; item.title &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        newsList:[</span><br><span class="line">            &#123;</span><br><span class="line">                id:01,</span><br><span class="line">                title:&quot;news1&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                id:02,</span><br><span class="line">                title:&quot;news2&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                id:03,</span><br><span class="line">                title:&quot;news3&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组增加元素后只需要渲染新增的数据</strong>需要增加唯一的ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in newsList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &#123;&#123; item.title &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br></pre></td></tr></table></figure><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><p>1.监听事件（添加事件）<br><strong>v-on</strong>（通常缩写为@）来监听DOM事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;counter +=1&quot;&gt;Add 1：counter = &#123;&#123; counter &#125;&#125;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        counter:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码标识点一下按钮counter就加一<br>2.事件处理方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;clickHandle&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        message:&quot;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">    clickHandle(event)&#123;</span><br><span class="line">        console.log(&quot;hhh&quot;);</span><br><span class="line">        this.message = &quot;2&quot;;</span><br><span class="line">        console.log(event);</span><br><span class="line">        event.target.innerHTML = &quot;点击&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过函数执行JS代码也可以改变页面中的内容<br><strong>event</strong>是原生DOM的event（事件对象）<br><strong>event.target.innerHTML</strong>可以将按钮上的字改变<br>3.事件传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;say（hi）&quot;&gt;say hi&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;say（what）&quot;&gt;say what&lt;/button&gt;</span><br><span class="line">methods:&#123;</span><br><span class="line">    say(data)&#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>data就是传递过来的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li @click=&quot;clickItemHandle(item)&quot; v-for=&quot;(item,index) in names&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        names:[&quot;jack&quot;,&quot;tom&quot;,&quot;mara&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    clickItemHandle(item)&#123;</span><br><span class="line">        console.log(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述操作传递了列表中的参数</p><h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><p><strong>v-model</strong>指令监听用户输入数据的更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    input type=&quot;text&quot; v-model=&quot;username&quot;</span><br><span class="line">    &lt;p&gt;&#123;&#123; username &#125;&#125;&lt;/p&gt;</span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        username:&quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在输入的同时会在页面上显示输入的内容（双向数据绑定）</p><p>修饰符：<br>.lazy<br>v-model在每次input事件触发后都会将输入框的值与数据进行同步，加了lazy修饰符后会转为在change事件后同步。（回车后）<br><strong>v-model.lazy</strong></p><p>.trim<br>自动过滤用户输入的首位空白字符<br><strong>v-model.trim</strong></p><h1 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h1><p><strong>components文件夹</strong><br>1.单文件组件<br><strong>后缀名为.vue</strong>,一个文件中可以同时存在html，css，js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;xxx&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;scripts&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name:&quot;xxx&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/scripts&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>scoped：如果在style中添加此属性，就代表着当前样式只在当前组件中生效<br>2.加载组件<br>第一步：引入组件<br>在APP.vue（根组件）中引入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import xxx from &quot;./components/xxx.vue&quot;</span><br></pre></td></tr></table></figure><p>第二步：挂载组件<br>在APP.vue的JS单元中挂载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line">    xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：显示组件<br>以标签的形式加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;xxx /&gt;</span><br></pre></td></tr></table></figure><p>3.组件的组织<br>通常形成组件树的形式</p><h1 id="Props组件交互"><a href="#Props组件交互" class="headerlink" title="Props组件交互"></a>Props组件交互</h1><p>组件与组件之间存在数据交互<br>在APP.vue中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;xxx :title=&quot;title&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import xxx from &quot;./components/xxx.vue&quot;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            title:&quot;xxx&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在xxx组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">        title:&#123;</span><br><span class="line">            type:String,</span><br><span class="line">            default:&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Prop对传递的参数的类型没有限制</strong><br>注：数组和对象必须使用函数返回<br>例：default:function(){<br>    return []<br>}</p><h1 id="自定义事件组件交互"><a href="#自定义事件组件交互" class="headerlink" title="自定义事件组件交互"></a>自定义事件组件交互</h1><p>（数据的反向传递，与Prop相反）<br>在APP.vue中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;xxx @onEvent=&quot;getDataHandle&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import xxx from &quot;./components/xxx.vue&quot;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        xxx</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getDataHandle(data)&#123;</span><br><span class="line">            console.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在xxx组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;button @click=&quot;sendClickHandle&quot;&gt;点击传递&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            message:&quot;xxx&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        sendClickHandle()&#123;</span><br><span class="line">            this.$emit(&quot;onEvent&quot;,this.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在emit（）中的两个参数是字符串(需要具有意义)和传递的参数</p><h1 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h1><p>组件被创建时会经过一系列过程，例如：设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM。在这过程中运行生命周期钩子函数能让用户在不同阶段添加之间的代码<br><strong>生命周期函数有八个</strong>（不需要手动调用）<br>创建时：beforeCreate,created<br>渲染时：beforeMount,mounted<br>更新时：beforeUpdate,updated<br>卸载时：beforeUnmount,unmounted</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;message=&#x27;1&#x27;&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            message:&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">        console.log(&quot;xxx&quot;)</span><br><span class="line">    &#125;，</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最开始进页面会执行有前四个函数<br>按按钮后会执行下两个</p><blockquote><p>可以把网络请求放到mounted函数里<br>组件卸载之前把消耗性能的处理都干掉（定时器）</p></blockquote><h1 id="Vue引入第三方"><a href="#Vue引入第三方" class="headerlink" title="Vue引入第三方"></a>Vue引入第三方</h1><p>引入别人写好的代码<br>1.Swiper（轮播图）<br>Swiper是纯JS打造的滑动特效插件<br>官方文档：<br><a href="https://swiperjs.com/vue">https://swiperjs.com/vue</a><br>安装指定版本：npm install –save <a href="mailto:&#x73;&#x77;&#105;&#x70;&#101;&#x72;&#64;&#56;&#46;&#49;&#46;&#54;">&#x73;&#x77;&#105;&#x70;&#101;&#x72;&#64;&#56;&#46;&#49;&#46;&#54;</a><br>基础实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">        &lt;swiper class=&quot;mySwiper&quot;&gt;</span><br><span class="line">            &lt;swiper-slide&gt;Slide 1（可放入图片）&lt;/swiper-slide&gt;/页</span><br><span class="line">            &lt;swiper-slide&gt;Slide 2&lt;/swiper-slide&gt;</span><br><span class="line">            &lt;swiper-slide&gt;Slide 3&lt;/swiper-slide&gt;</span><br><span class="line">        &lt;/swiper&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; Swiper,SwiperSlide &#125; from &#x27;swiper/vue&#x27;;/引入</span><br><span class="line">import &#x27;swiper/css&#x27;;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">    name:&#x27;HelloWorld&#x27;,</span><br><span class="line">    /组件</span><br><span class="line">    components:&#123;</span><br><span class="line">        Swiper,</span><br><span class="line">        SwiperSlide,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>添加指示器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;swiper :modules=&quot;modules&quot; :pagination=&quot;&#123; clickable: true &#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">import &#123;  Pagination &#125; from &#x27;swiper&#x27;;</span><br><span class="line">import &#x27;swiper/css/pagination&#x27;;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        modules: [ Pagination ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是显示滚动条</p><h1 id="Axios网络请求"><a href="#Axios网络请求" class="headerlink" title="Axios网络请求"></a>Axios网络请求</h1><p>基于promise的网络请求库<br><strong>组件中引入</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &quot;axios&quot;</span><br></pre></td></tr></table></figure><p><strong>get请求</strong>：<br>mounted（组件渲染完成后）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; chengpin.title &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        chengpin:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line">    axios(&#123;</span><br><span class="line">        method:&quot;get&quot;,</span><br><span class="line">        url:&quot;http://xxx&quot;</span><br><span class="line">    &#125;).then(res =&gt;&#123;</span><br><span class="line">        console.log(res.data);</span><br><span class="line">        this.chengpin=res.data.chengpinDetails[0]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>post请求</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">method:&quot;post&quot;</span><br><span class="line">url:&quot;&quot;</span><br><span class="line">data: querystring.stringify(&#123;</span><br><span class="line">    user_id:&quot;iwen@qq.com&quot;,</span><br><span class="line">    password:&quot;iwen123&quot;,</span><br><span class="line">    verification_code:&quot;crfvw&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;).then(res =&gt;&#123;</span><br><span class="line">    console.log(res.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>querystring是转换格式的<br><strong>快捷方法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&quot;url&quot;)</span><br><span class="line">.then(res =&gt;&#123;</span><br><span class="line">    console.log(res.data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.post(&quot;url&quot;,querystring。stringify(&#123;</span><br><span class="line">    user_id:&quot;iwen@qq.com&quot;,</span><br><span class="line">    password:&quot;iwen123&quot;,</span><br><span class="line">    verification_code:&quot;crfvw&quot;</span><br><span class="line">&#125;)).then(res =&gt;&#123;</span><br><span class="line">    console.log(res.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>全局引入</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import axios from &quot;axios&quot;</span><br><span class="line"></span><br><span class="line">const app = createApp(App);</span><br><span class="line">app.config.globalProperties.$axios = axios</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line">/在组件中调用</span><br><span class="line">this.$axios</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$axios.get</span><br></pre></td></tr></table></figure><h1 id="axios网络请求封装"><a href="#axios网络请求封装" class="headerlink" title="axios网络请求封装"></a>axios网络请求封装</h1><p>一个项目的网络请求会很多，此时一般将网络请求封装起来<br>一般在src目录下的utils文件夹中创建request.js来存储网络请求对象axios</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import axios from &quot;axios&quot;</span><br><span class="line">import querystring from &quot;querystring&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const errorHandle = (status,info) =&gt; &#123;</span><br><span class="line">    switch(status)&#123;</span><br><span class="line">        case 400:</span><br><span class="line">        console.log(&quot;语义有误&quot;);</span><br><span class="line">        break;</span><br><span class="line">        case 401:</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const instance = axios.create(&#123;</span><br><span class="line">    /网络请求的公共配置</span><br><span class="line">    timeout:5000</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/拦截器（最常用）</span><br><span class="line"></span><br><span class="line">/发送数据之前</span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">    config =&gt;&#123;</span><br><span class="line">        if(config.methods === &quot;post&quot;)&#123;</span><br><span class="line">            config.data = querystring.stringify(config.data)/以后就不用转换了</span><br><span class="line">        &#125;</span><br><span class="line">        /config包含网络请求的所有信息</span><br><span class="line">        return config;</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt;&#123;</span><br><span class="line">        return Promise.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/获取数据之前</span><br><span class="line">instance。interceptors.response.use(</span><br><span class="line">    response =&gt;&#123;</span><br><span class="line">        return response.status === 200 ? Promise.resolve(response) : Promise.reject(response)</span><br><span class="line">    &#125;,</span><br><span class="line">    /发送过程出问题</span><br><span class="line">    error =&gt;&#123;</span><br><span class="line">        const &#123; response &#125; = error;</span><br><span class="line">        /错误的处理才是我们需要关注的</span><br><span class="line">        errorHandle(response,status,respomse.info)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export default instance;</span><br></pre></td></tr></table></figure><p><strong>参考文档</strong>：<a href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a></p><p>使用方式：<br>在src路径下的api文件夹下创建path.js和index.js<br><strong>path.js</strong>中放网络请求的路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const base = &#123;</span><br><span class="line">    baseUrl:&quot;&quot;,</span><br><span class="line">    chengpin:&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default base;</span><br></pre></td></tr></table></figure><p><strong>index.js</strong>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import axios from &quot;../utils/request&quot;</span><br><span class="line">import path from &quot;./path&quot;</span><br><span class="line"></span><br><span class="line">const api = &#123;</span><br><span class="line">    /chengpin地址</span><br><span class="line">    getChengpin()&#123;</span><br><span class="line">        return axios.get(path.baseUrl + path.chengpin)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default api</span><br></pre></td></tr></table></figure><p>在组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import api from &quot;../api/index&quot;</span><br><span class="line"></span><br><span class="line">mounted()&#123;</span><br><span class="line">    api.getChengpin().then(res =&gt;&#123;</span><br><span class="line">        console.log(res.data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网络请求跨域解决方案"><a href="#网络请求跨域解决方案" class="headerlink" title="网络请求跨域解决方案"></a>网络请求跨域解决方案</h1><blockquote><p>JS采取的是同源策略：同源策略是浏览器的一项安全策略，它只允许js代码请求和当前所在服务器域名，端口，协议相同的数据接口上的数据。<br>即协议、域名、端口任意一个不相同时都会产生跨域问题。</p></blockquote><p>主流解决跨域的方案：<br>1.后台：cors<br>2.前台：proxy<br>在config.js中在true，后面加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">    proxy:&#123;</span><br><span class="line">        &#x27;/api&#x27;:&#123;</span><br><span class="line">            target:&#x27;url&#x27;,</span><br><span class="line">            changeOrigin:true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将组件中.get中的url前半段去掉即可</p><h1 id="Vue引入路由配置"><a href="#Vue引入路由配置" class="headerlink" title="Vue引入路由配置"></a>Vue引入路由配置</h1><blockquote><p>路由用来管理页面之间的关系</p></blockquote><p>官方路由：Vue Router<br>利用它可以方便的构建单页面应用</p><p>1.在src下的router文件夹里创建index.js文件<br>在src下的views文件夹里创建页面文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createRouter,createWebHashHistory &#125; from &quot;vue-router&quot;</span><br><span class="line">/引入两个页面</span><br><span class="line">import HomeView from &quot;xxx&quot;</span><br><span class="line">import AboutView from &quot;xxxx&quot;</span><br><span class="line">/配置消息中需要页面的相关配置</span><br><span class="line"></span><br><span class="line">const routes= [</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#x27;/&#x27;,</span><br><span class="line">        component:HomeView</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&quot;/about&quot;,</span><br><span class="line">        component:AboutView</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    history:createWebHashHistory(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router;</span><br></pre></td></tr></table></figure><p>2.在main.js中引入<br>import router from “./router”<br>在createApp后面加上.use(router)</p><p>3.在APP.vue中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/路由在页面上的显示路口</span><br><span class="line">&lt;template&gt;</span><br><span class="line">/实现跳转</span><br><span class="line">&lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt; |</span><br><span class="line">&lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">/指定显示路口</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>create WebHashHistory “<a href="http://localhost:8080/#/&quot;">http://localhost:8080/#/&quot;</a><br>createWebHistory “<a href="http://localhost:8080/&quot;">http://localhost:8080/&quot;</a><br>/下面的方法需要后台配合重定向不然会404</p></blockquote><h1 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h1><p>通过列表跳转<br>新建NewsDetailsView.vue文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;router-link to=&quot;/newsdetails/百度&quot;&gt;百度新闻&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">path:&quot;/newsdetails/:name&quot;,</span><br><span class="line">name:&quot;newsdetails&quot;,</span><br><span class="line">component:() =&gt;import(&quot;../views/NewsDetailsView,vue&quot;)</span><br></pre></td></tr></table></figure><p>NewsDetailsView.vue文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; $route.params.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>#嵌套路由配置<br>主导航，子导航<br>以AboutView.vue举例：<br>在views下创建文件夹AboutSub存放About的子页面<br>创建AboutUS.vue和Aboutinfo.vue<br><strong>router配置文件</strong>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">about的后面</span><br><span class="line">/重定向</span><br><span class="line">redirect:&quot;/about/us&quot;,</span><br><span class="line">,children:[</span><br><span class="line">    &#123;</span><br><span class="line">        /二级导航的路径不要加斜杠</span><br><span class="line">        path:&quot;us&quot;,</span><br><span class="line">        component:() =&gt; import(&quot;../views/AboutSub/AboutUS.vue&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:&quot;info&quot;,</span><br><span class="line">        component:() =&gt; import(&quot;../views/AboutSub/AboutInfo.vue&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>Aboutinfo</strong>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;tmeplate&gt;</span><br><span class="line">&lt;h3&gt;关于信息&lt;/h3&gt;</span><br><span class="line">&lt;/tmeplate&gt;</span><br></pre></td></tr></table></figure><p><strong>AboutUS</strong>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;tmeplate&gt;</span><br><span class="line">&lt;h3&gt;关于我们&lt;/h3&gt;</span><br><span class="line">&lt;/tmeplate&gt;</span><br></pre></td></tr></table></figure><p><strong>AboutView</strong>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;about&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about/us&quot;&gt;关于我们&lt;/router-link&gt;|</span><br><span class="line">    &lt;router-link to=&quot;about/info&quot;&gt;关于信息&lt;/router-link&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue状态管理（Vuex）"><a href="#Vue状态管理（Vuex）" class="headerlink" title="Vue状态管理（Vuex）"></a>Vue状态管理（Vuex）</h1><p><strong>组件与组件之间的数据管理</strong><br>提供一个集中的数据管理<br>在组件中的读取方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;counter:&#123;&#123; $store.state.counter &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;;</span><br><span class="line">computed:&#123;</span><br><span class="line">    ...mapState([&quot;counter&quot;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的核心：<br>Getter：<br>对Vuex中的数据进行过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    getCount(state)&#123;</span><br><span class="line">        return state.counter &gt; 0 ? state.counter : &quot;counter小于0，不符合要求&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">computed:&#123;</span><br><span class="line">    ...mapGetters([&quot;getCounter&quot;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mutation：<br>更改Vuex中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations:&#123;</span><br><span class="line">    addCounter(state,num)&#123;</span><br><span class="line">        state.counter += num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用按钮方式调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapState,mapMutations &#125;from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">    ...mapMutations([&quot;setCounter&quot;]),</span><br><span class="line">    clickHandler()&#123;</span><br><span class="line">        this.setCounter(10)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Action:<br>类似于mutation。在有异步操作时要用到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions:&#123;</span><br><span class="line">    asyncAddcounter(&#123; commit &#125;)&#123;</span><br><span class="line">        axios.get(&quot;xxx&quot;)</span><br><span class="line">        .then(res =&gt;&#123;</span><br><span class="line">            commit(&quot;addcounter&quot;,res.data[0])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapActions &#125;</span><br><span class="line"></span><br><span class="line">...mapActions([&quot;asyncAddCounter&quot;]),</span><br><span class="line">addAsyncClickhandle()&#123;</span><br><span class="line">    this.asyncAddcounter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vue3的新特性"><a href="#vue3的新特性" class="headerlink" title="vue3的新特性"></a>vue3的新特性</h1><p>组合式API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref,reactive &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">setup()&#123;</span><br><span class="line">/ref</span><br><span class="line">const message = ref(&quot;xxx&quot;)</span><br><span class="line">/reactive</span><br><span class="line">const names = reactive(&#123;</span><br><span class="line">    list:[&quot;x&quot;,&quot;xx&quot;]</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return&#123;</span><br><span class="line">    message</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能算法学习</title>
      <link href="/2023/04/23/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/"/>
      <url>/2023/04/23/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="循环神经网络（RNN）"><a href="#循环神经网络（RNN）" class="headerlink" title="循环神经网络（RNN）"></a>循环神经网络（RNN）</h1><blockquote><p>RNN对具有序列特性的数据非常有效，它能挖掘数据中的时序信息以及语义信息。<strong>序列特性</strong>就是符合时间顺序，逻辑顺序，或者其他顺序。<br>例子：一个人说的一句话是符合某个逻辑的字词拼接起来的。</p></blockquote><h3 id="发明循环神经网络的原因"><a href="#发明循环神经网络的原因" class="headerlink" title="发明循环神经网络的原因"></a>发明循环神经网络的原因</h3><p>I like eating apple！<br>The Apple is a great company！<br>两句话我们能看出两个Apple有不同的意义。当使用全连接神经网络时我们会给不同的APPLE打上label（标签）然后将apple的特征向量输入到如下的模型中</p><blockquote><p>特征向量：矩阵的特征向量是矩阵理论上的重要概念之一，它有着广泛的应用。数学上，线性变换的特征向量（本征向量）是一个非简并的向量，其方向在该变换下不变。该向量在此变换下缩放的比例称为其特征值（本征值）。<br><img src="/img/%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpeg" alt="这是图片" title="Magic Gardens"><br>输出结果时，让我们的Label里，正确的Label概率最大。但是因为我们的库中的Apple有不同的意思这就导致预测的准确程度取决于训练集中的哪个Label多一点，所以这就对我们没有一点用。<strong>问题就出在没有结合上下文训练模型，于是就出现了循环神经网络</strong></p></blockquote><h3 id="循环神经网络的结构和原理"><a href="#循环神经网络的结构和原理" class="headerlink" title="循环神经网络的结构和原理"></a>循环神经网络的结构和原理</h3><p><img src="/img/RNN%E7%AE%80%E5%8D%95%E7%BB%93%E6%9E%84.jpg" alt="这是图片" title="Magic Gardens"><br>这是简单的RNN结构。这和上面的全神经网络看着很不一样。<br>但是当我们先不管右边的W，只看左边的X,U,S,V,O时这幅图就会变成和上面全神经网络的图一模一样，X是某个特征向量，作为输入层，U是输入层到隐藏层的参数矩阵，S是隐藏层的向量，V是隐藏层到输出层的参数矩阵，O是输出层的向量。<br>接下来我们看看右边的W。上面的图按照时间线展开后变成了这样：<br><img src="/img/RNN%E5%B1%95%E5%BC%80%E7%BB%93%E6%9E%84.jpg" alt="这是图片" title="Magic Gardens"><br>举个例子：有一句话，I love you那么上图的<em>X</em><sub>t-1</sub>代表I的向量，<em>X</em>代表love的向量，<em>X</em><sub>t+1</sub>代表you的向量。我们注意到W一直没变，其实<strong>W是每个时间点的权重矩阵</strong>。而RNN能解决序列问题，<strong>是因为它可以记住每一时刻的信息，每一时刻的隐藏层不仅由该时刻的输入层决定，还由上一时刻的隐藏层决定</strong>，公式如下，其中O<sub>t</sub>代表t时刻的输出，S<sub>t</sub>代表t时刻隐藏层的值：<br><img src="/img/RNN%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%8F.png" alt="这是图片" title="Magic Gardens"><br>g和f为激活函数</p><blockquote><p>激活函数（Activation Function）是一种添加到人工神经网络中的函数，旨在帮助网络学习数据中的复杂模式。在神经元中，输入的input经过一系列加权求和后作用于另一个函数，这个函数就是这里的激活函数<br>为什么要使用激活函数？因为神经网络中每一层的输入输出都是一个线性求和的过程，下一层的输出只是承接了上一层输入函数的线性变换，所以如果没有激活函数，那么无论你构造的神经网络多么复杂，有多少层，最后的输出都是输入的线性组合，纯粹的线性组合并不能够解决更为复杂的问题。而引入激活函数之后，我们会发现常见的激活函数都是非线性的，因此也会给神经元引入非线性元素，使得神经网络可以逼近其他的任何非线性函数，这样可以使得神经网络应用到更多非线性模型中。</p></blockquote><h3 id="实现RNN的代码"><a href="#实现RNN的代码" class="headerlink" title="实现RNN的代码"></a>实现RNN的代码</h3><p>pytorch中RNN模块函数torch.nn.RNN<br>参数：<br><strong>input_size</strong>:输入数据的编码维度<br><strong>hiddensize</strong>：隐含层的维数（通常为20）<br><strong>num_layers</strong>:隐含层的层数（一般来说，层数越多，整个网络的误差也就越小，但是会是整个网络复杂化，增加网络的训练时间，也有可能出现“过拟合”（太适应于训练集，在测试集上效果不好）的情况。一般来说，一两层的隐藏层已经能够解决很多问题了，如果数据量多，可以在防止出现过拟合的情况下适当的增加层数。）<br><strong>batch_first</strong>：当 batch_first设置为True时，输入的参数顺序变为：x：[batch, seq_len, input_size]，h0：[batch, num_layers, hidden_size]。<br>使用实例：<br>比如我现在想设计一个4层的RNN，用来做语音翻译，输入是一段中文，输出是一段英文。假设每个中文字符用100维数据进行编码，每个隐含层的维度是20，有4个隐含层。所以input_size = 100，hidden_size = 20，num_layers = 4。再假设模型已经训练好了，现在有个1个长度为10的句子做输入，那么seq_len = 10，batch_size = 1。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line">input_size = <span class="number">100</span>   <span class="comment"># 输入数据编码的维度</span></span><br><span class="line">hidden_size = <span class="number">20</span>   <span class="comment"># 隐含层维度</span></span><br><span class="line">num_layers = <span class="number">4</span>     <span class="comment"># 隐含层层数</span></span><br><span class="line"></span><br><span class="line">rnn = nn.RNN(input_size=input_size,hidden_size=hidden_size,num_layers=num_layers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rnn:&quot;</span>,rnn)</span><br><span class="line"></span><br><span class="line">seq_len = <span class="number">10</span>        <span class="comment"># 句子长度</span></span><br><span class="line">batch_size = <span class="number">1</span>      </span><br><span class="line">x = torch.randn(seq_len,batch_size,input_size)        <span class="comment"># 输入数据</span></span><br><span class="line">h0 = torch.zeros(num_layers,batch_size,hidden_size)   <span class="comment"># 输入数据</span></span><br><span class="line"></span><br><span class="line">out, h = rnn(x, h0)  <span class="comment"># 输出数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out.shape:&quot;</span>,out.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h.shape:&quot;</span>,h.shape)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>传统RNN的优势：由于内部结构简单, 对计算资源要求低, 相比之后我们要学习的RNN变体:LSTM和GRU模型参数总量少了很多, 在短序列任务上性能和效果都表现优异.<br>缺点：传统RNN在解决长序列之间的关联时, 通过实践，证明经典RNN表现很差, 原因是在进行反向传播的时候, 过长的序列导致梯度的计算异常, 发生梯度消失或爆炸.</p><h1 id="长短期记忆网络（LSTM）"><a href="#长短期记忆网络（LSTM）" class="headerlink" title="长短期记忆网络（LSTM）"></a>长短期记忆网络（LSTM）</h1><blockquote><p>LSTM是RNN的一种变体，可以解决长期记忆问题。</p></blockquote><h3 id="什么是LSTM"><a href="#什么是LSTM" class="headerlink" title="什么是LSTM"></a>什么是LSTM</h3><p>RNN在对短时间序列数据的分析时十分方便，但是它有长期依赖问题：RNN只能处理较接近的上下文的情况。而且RNN还会有梯度消失（神经网络的权重/偏置梯度极小，导致神经网络参数调整速率急剧下降）和梯度爆炸（神经网络的权重/偏置梯度极大，导致神经网络参数调整幅度过大，矫枉过正）问题</p><h3 id="为什么需要LSTM"><a href="#为什么需要LSTM" class="headerlink" title="为什么需要LSTM"></a>为什么需要LSTM</h3><p>LSTM从被设计之初就被用于解决一般递归神经网络中普遍存在的长期依赖问题，使用LSTM可以有效的传递和表达长时间序列中的信息并且不会导致长时间前的有用信息被忽略（遗忘）。与此同时，LSTM还可以解决RNN中的梯度消失/爆炸问题。</p><h3 id="解释LSTM"><a href="#解释LSTM" class="headerlink" title="解释LSTM"></a>解释LSTM</h3><p>一个普通的RNN：<br><img src="/img/RNN%E7%BB%93%E6%9E%84.png" alt="这是图片" title="Magic Gardens"><br>可以看到A在t-1时刻的输出值h<sub>t-1</sub>被复制到了t时刻，与t时刻的输入x<sub>t</sub>整合后结果一个带权重和偏置的tanh函数后形成输出，并继续将数据复制到t+1时刻<br>如下是LSTM的结构：<br><img src="/img/LSTM%E7%BB%93%E6%9E%84.png" alt="这是图片" title="Magic Gardens"><br>可以看出每个LSTM单元有更加复杂的内部结构和输入输出，在上图中，每一个红色圆形代表对向量做出的操作（pointwise operation，对位操作），而黄色的矩形代表一个神经网络层，上面的字符代表神经网络所使用的激活函数</p><blockquote><p>point-wise operation 对位操作<br>如果我要对向量&lt;1, 2, 3&gt; 和 &lt;1, 3, 5&gt;进行逐分量的想成操作，会获得结果 &lt;1, 6, 15&gt;<br>layer 函数层<br>一个函数层拥有两个属性：权重向量(Weight) 和 偏置向量(bias)，对于输入向量A的每一个分量i，函数层会对其进行以下操作：output<sub>i</sub>=F（W<sub>i</sub>*A<sub>i</sub>+b<sub>i</sub>）常见的激活函数有ReLU（线性修正单元），sigmoid（kesai）和tanh</p></blockquote><p>LSTM区别于RNN最大的优势就是上图中从单元中贯穿而过的线-神经元的隐藏态（单元状态），我们可以将神经元的隐藏态简单的理解成递归神经网络对于输入数据的“记忆”，用C<sub>t</sub>表示神经元在t时刻过后的“记忆”，这个向量涵盖了在t+1时刻前神经网络对于所有输入信息的“概括总结”<br><img src="/img/LSTM%E5%8D%95%E5%85%83%E7%8A%B6%E6%80%81.jpg" alt="这是图片" title="Magic Gardens"><br>接下来看一下LSTM四个函数层分别在干什么：<br><strong>LSTM_1 遗忘门</strong><br><img src="/img/LSTM%E9%81%97%E5%BF%98%E9%97%A8.jpg" alt="这是图片" title="Magic Gardens"><br>对于上一时刻LSTM中的单元状态来说，一些“信息”可能会随着时间的流逝而“过时”。为了不让过多记忆影响神经网络对现在输入的处理，我们应该选择性遗忘一些在之前单元状态中的分量——这个工作就交给了“遗忘门”<br>每一次输入一个新的输入，LSTM会先根据新的输入和上一时刻的输出决定遗忘掉之前的哪些记忆——输入和上一步的输出会整合为一个单独的向量，然后通过sigmoid神经层，最后点对点的乘在单元状态上。因为sigmoid 函数会将任意输入压缩到（0，1）的区间上，我们可以非常直觉的得出这个门的工作原理 —— 如果整合后的向量某个分量在通过sigmoid层后变为0，那么显然单元状态在对位相乘后对应的分量也会变成0，换句话说，“遗忘”了这个分量上的信息；如果某个分量通过sigmoid层后为1，单元状态会“保持完整记忆”。不同的sigmoid输出会带来不同信息的记忆与遗忘。通过这种方式，LSTM可以<strong>长期记忆重要信息</strong>，并且<strong>记忆可以随着输入进行动态调整</strong><br>下面的公式就是遗忘门的计算：<br><img src="/img/LSTM%E9%81%97%E5%BF%98%E9%97%A8%E8%AE%A1%E7%AE%97.png" alt="这是图片" title="Magic Gardens"></p><p><strong>LSTM_2&amp;3 记忆门</strong><br><img src="/img/LSTM%E8%AE%B0%E5%BF%86%E9%97%A8.jpg" alt="这是图片" title="Magic Gardens"><br>记忆门是用来控制是否将在t时刻（现在）的数据并入单元状态中的控制单位。首先，用tanh函数层将现在的向量中的有效信息提取出来，然后使用（图上tanh函数层左侧）的sigmoid函数来控制这些记忆要放“多少”进入单元状态。这两者结合起来就可以做到：<br>1.从当前输入中提取有效信息<br>2.对提取的有效信息做出筛选，为每个分量做出评级(0 ~ 1)，评级越高的最后会有越多的记忆进入单元状态<br>下面的公式分别为这两个步骤在LSTM中的计算<br><img src="/img/LSTM%E8%AE%B0%E5%BF%86%E9%97%A8%E8%AE%A1%E7%AE%97.png" alt="这是图片" title="Magic Gardens"></p><p><strong>LSTM_4 输出门</strong><br>输出门，顾名思义，就是LSTM单元用于计算当前时刻的输出值的神经层。输出层会先将当前输入值与上一时刻输出值整合后的向量（也就是公式中的[h<sub>t-1</sub>,x<sub>t</sub>]）用sigmoid函数提取其中的信息，接着，会将当前的单元状态通过tanh函数压缩映射到区间(-1, 1)中</p><blockquote><p>为什么我们要在LSTM的输出门上使用tanh函数？<br>以下引用自Stack Overflow上问题 What is the intuition of using tanh in LSTM 中的最佳答案：<br><a href="https://stackoverflow.com/questions/40761185/what-is-the-intuition-of-using-tanh-in-lstm">https://stackoverflow.com/questions/40761185/what-is-the-intuition-of-using-tanh-in-lstm</a><br>在LSTM的输入和输出门中使用tanh函数有以下几个原因：</p></blockquote><ol><li>为了防止梯度消失问题，我们需要一个二次导数在大范围内不为0的函数，而tanh函数可以满足这一点</li><li>为了便于凸优化，我们需要一个单调函数</li><li>tanh函数一般收敛的更快</li><li>tanh函数的求导占用系统的资源更少<br>将经过tanh函数处理后的单元状态与sigmoid函数处理后的，整合后的向量点对点的乘起来就可以得到LSTM在t时刻的输出了！</li></ol><h3 id="基于pytorch的LSTM代码实现"><a href="#基于pytorch的LSTM代码实现" class="headerlink" title="基于pytorch的LSTM代码实现"></a>基于pytorch的LSTM代码实现</h3><p>我们取正弦函数的值作为LSTM的输入，来预测余弦函数的值。基于Pytorch来构建LSTM模型，采用1个输入神经元，1个输出神经元，16个隐藏神经元作为LSTM网络的构成参数，平均绝对误差（LMSE）作为损失误差，使用Adam优化算法来训练LSTM神经网络。基于Anaconda和Python3.6的完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LstmRNN</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Parameters：</span></span><br><span class="line"><span class="string">        - input_size: feature size</span></span><br><span class="line"><span class="string">        - hidden_size: number of hidden units</span></span><br><span class="line"><span class="string">        - output_size: number of output</span></span><br><span class="line"><span class="string">        - num_layers: layers of LSTM to stack</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_size, hidden_size=<span class="number">1</span>, output_size=<span class="number">1</span>, num_layers=<span class="number">1</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"> </span><br><span class="line">        self.lstm = nn.LSTM(input_size, hidden_size, num_layers) <span class="comment"># utilize the LSTM model in torch.nn </span></span><br><span class="line">        self.forwardCalculation = nn.Linear(hidden_size, output_size)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, _x</span>):</span><br><span class="line">        x, _ = self.lstm(_x)  <span class="comment"># _x is input, size (seq_len, batch, input_size)</span></span><br><span class="line">        s, b, h = x.shape  <span class="comment"># x is output, size (seq_len, batch, hidden_size)</span></span><br><span class="line">        x = x.view(s*b, h)</span><br><span class="line">        x = self.forwardCalculation(x)</span><br><span class="line">        x = x.view(s, b, -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># create database</span></span><br><span class="line">    data_len = <span class="number">200</span></span><br><span class="line">    t = np.linspace(<span class="number">0</span>, <span class="number">12</span>*np.pi, data_len)</span><br><span class="line">    sin_t = np.sin(t)</span><br><span class="line">    cos_t = np.cos(t)</span><br><span class="line"></span><br><span class="line">    dataset = np.zeros((data_len, <span class="number">2</span>))</span><br><span class="line">    dataset[:,<span class="number">0</span>] = sin_t</span><br><span class="line">    dataset[:,<span class="number">1</span>] = cos_t</span><br><span class="line">    dataset = dataset.astype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plot part of the original dataset</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.plot(t[<span class="number">0</span>:<span class="number">60</span>], dataset[<span class="number">0</span>:<span class="number">60</span>,<span class="number">0</span>], label=<span class="string">&#x27;sin(t)&#x27;</span>)</span><br><span class="line">    plt.plot(t[<span class="number">0</span>:<span class="number">60</span>], dataset[<span class="number">0</span>:<span class="number">60</span>,<span class="number">1</span>], label = <span class="string">&#x27;cos(t)&#x27;</span>)</span><br><span class="line">    plt.plot([<span class="number">2.5</span>, <span class="number">2.5</span>], [-<span class="number">1.3</span>, <span class="number">0.55</span>], <span class="string">&#x27;r--&#x27;</span>, label=<span class="string">&#x27;t = 2.5&#x27;</span>) <span class="comment"># t = 2.5</span></span><br><span class="line">    plt.plot([<span class="number">6.8</span>, <span class="number">6.8</span>], [-<span class="number">1.3</span>, <span class="number">0.85</span>], <span class="string">&#x27;m--&#x27;</span>, label=<span class="string">&#x27;t = 6.8&#x27;</span>) <span class="comment"># t = 6.8</span></span><br><span class="line">    plt.xlabel(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">    plt.ylim(-<span class="number">1.2</span>, <span class="number">1.2</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;sin(t) and cos(t)&#x27;</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># choose dataset for training and testing</span></span><br><span class="line">    train_data_ratio = <span class="number">0.5</span> <span class="comment"># Choose 80% of the data for testing</span></span><br><span class="line">    train_data_len = <span class="built_in">int</span>(data_len*train_data_ratio)</span><br><span class="line">    train_x = dataset[:train_data_len, <span class="number">0</span>]</span><br><span class="line">    train_y = dataset[:train_data_len, <span class="number">1</span>]</span><br><span class="line">    INPUT_FEATURES_NUM = <span class="number">1</span></span><br><span class="line">    OUTPUT_FEATURES_NUM = <span class="number">1</span></span><br><span class="line">    t_for_training = t[:train_data_len]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># test_x = train_x</span></span><br><span class="line">    <span class="comment"># test_y = train_y</span></span><br><span class="line">    test_x = dataset[train_data_len:, <span class="number">0</span>]</span><br><span class="line">    test_y = dataset[train_data_len:, <span class="number">1</span>]</span><br><span class="line">    t_for_testing = t[train_data_len:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ----------------- train -------------------</span></span><br><span class="line">    train_x_tensor = train_x.reshape(-<span class="number">1</span>, <span class="number">5</span>, INPUT_FEATURES_NUM) <span class="comment"># set batch size to 5</span></span><br><span class="line">    train_y_tensor = train_y.reshape(-<span class="number">1</span>, <span class="number">5</span>, OUTPUT_FEATURES_NUM) <span class="comment"># set batch size to 5</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># transfer data to pytorch tensor</span></span><br><span class="line">    train_x_tensor = torch.from_numpy(train_x_tensor)</span><br><span class="line">    train_y_tensor = torch.from_numpy(train_y_tensor)</span><br><span class="line">    <span class="comment"># test_x_tensor = torch.from_numpy(test_x)</span></span><br><span class="line"> </span><br><span class="line">    lstm_model = LstmRNN(INPUT_FEATURES_NUM, <span class="number">16</span>, output_size=OUTPUT_FEATURES_NUM, num_layers=<span class="number">1</span>) <span class="comment"># 16 hidden units</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;LSTM model:&#x27;</span>, lstm_model)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;model.parameters:&#x27;</span>, lstm_model.parameters)</span><br><span class="line"> </span><br><span class="line">    loss_function = nn.MSELoss()</span><br><span class="line">    optimizer = torch.optim.Adam(lstm_model.parameters(), lr=<span class="number">1e-2</span>)</span><br><span class="line"> </span><br><span class="line">    max_epochs = <span class="number">10000</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(max_epochs):</span><br><span class="line">        output = lstm_model(train_x_tensor)</span><br><span class="line">        loss = loss_function(output, train_y_tensor)</span><br><span class="line"> </span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> loss.item() &lt; <span class="number">1e-4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Epoch [&#123;&#125;/&#123;&#125;], Loss: &#123;:.5f&#125;&#x27;</span>.<span class="built_in">format</span>(epoch+<span class="number">1</span>, max_epochs, loss.item()))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The loss value is reached&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> (epoch+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Epoch: [&#123;&#125;/&#123;&#125;], Loss:&#123;:.5f&#125;&#x27;</span>.<span class="built_in">format</span>(epoch+<span class="number">1</span>, max_epochs, loss.item()))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># prediction on training dataset</span></span><br><span class="line">    predictive_y_for_training = lstm_model(train_x_tensor)</span><br><span class="line">    predictive_y_for_training = predictive_y_for_training.view(-<span class="number">1</span>, OUTPUT_FEATURES_NUM).data.numpy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># torch.save(lstm_model.state_dict(), &#x27;model_params.pkl&#x27;) # save model parameters to files</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># ----------------- test -------------------</span></span><br><span class="line">    <span class="comment"># lstm_model.load_state_dict(torch.load(&#x27;model_params.pkl&#x27;))  # load model parameters from files</span></span><br><span class="line">    lstm_model = lstm_model.<span class="built_in">eval</span>() <span class="comment"># switch to testing model</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># prediction on test dataset</span></span><br><span class="line">    test_x_tensor = test_x.reshape(-<span class="number">1</span>, <span class="number">5</span>, INPUT_FEATURES_NUM) <span class="comment"># set batch size to 5, the same value with the training set</span></span><br><span class="line">    test_x_tensor = torch.from_numpy(test_x_tensor)</span><br><span class="line"> </span><br><span class="line">    predictive_y_for_testing = lstm_model(test_x_tensor)</span><br><span class="line">    predictive_y_for_testing = predictive_y_for_testing.view(-<span class="number">1</span>, OUTPUT_FEATURES_NUM).data.numpy()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># ----------------- plot -------------------</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.plot(t_for_training, train_x, <span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;sin_trn&#x27;</span>)</span><br><span class="line">    plt.plot(t_for_training, train_y, <span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;ref_cos_trn&#x27;</span>)</span><br><span class="line">    plt.plot(t_for_training, predictive_y_for_training, <span class="string">&#x27;y--&#x27;</span>, label=<span class="string">&#x27;pre_cos_trn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.plot(t_for_testing, test_x, <span class="string">&#x27;c&#x27;</span>, label=<span class="string">&#x27;sin_tst&#x27;</span>)</span><br><span class="line">    plt.plot(t_for_testing, test_y, <span class="string">&#x27;k&#x27;</span>, label=<span class="string">&#x27;ref_cos_tst&#x27;</span>)</span><br><span class="line">    plt.plot(t_for_testing, predictive_y_for_testing, <span class="string">&#x27;m--&#x27;</span>, label=<span class="string">&#x27;pre_cos_tst&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.plot([t[train_data_len], t[train_data_len]], [-<span class="number">1.2</span>, <span class="number">4.0</span>], <span class="string">&#x27;r--&#x27;</span>, label=<span class="string">&#x27;separation line&#x27;</span>) <span class="comment"># separation line</span></span><br><span class="line"></span><br><span class="line">    plt.xlabel(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;sin(t) and cos(t)&#x27;</span>)</span><br><span class="line">    plt.xlim(t[<span class="number">0</span>], t[-<span class="number">1</span>])</span><br><span class="line">    plt.ylim(-<span class="number">1.2</span>, <span class="number">4</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">    plt.text(<span class="number">14</span>, <span class="number">2</span>, <span class="string">&quot;train&quot;</span>, size = <span class="number">15</span>, alpha = <span class="number">1.0</span>)</span><br><span class="line">    plt.text(<span class="number">20</span>, <span class="number">2</span>, <span class="string">&quot;test&quot;</span>, size = <span class="number">15</span>, alpha = <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>如下为训练过程：<br><img src="/img/LSTM%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B.png" alt="这是图片" title="Magic Gardens"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计网学习</title>
      <link href="/2023/04/12/%E8%AE%A1%E7%BD%91/"/>
      <url>/2023/04/12/%E8%AE%A1%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="计网学习"><a href="#计网学习" class="headerlink" title="计网学习"></a>计网学习</h1><h2 id="第一章-计算机网络和因特网"><a href="#第一章-计算机网络和因特网" class="headerlink" title="第一章 计算机网络和因特网"></a>第一章 计算机网络和因特网</h2><blockquote><p>目标：了解基本属于和概念、掌握网络的基本原理</p></blockquote><h3 id="1-1什么是Internet？"><a href="#1-1什么是Internet？" class="headerlink" title="1.1什么是Internet？"></a>1.1什么是Internet？</h3><h5 id="网络："><a href="#网络：" class="headerlink" title="网络："></a>网络：</h5><p>节点和边的关系</p><h5 id="计算机网络："><a href="#计算机网络：" class="headerlink" title="计算机网络："></a>计算机网络：</h5><p>联网的计算机系统。<br>包括主机节点（电脑、手机等）是数据的源和目标，数据交换节点（路由器、交换机等）数据中转的节点，<br>链路（连接节点）：接入链路（主机连到互联网），主干链路（路由器间的链路）</p><h5 id="互联网："><a href="#互联网：" class="headerlink" title="互联网："></a>互联网：</h5><p>从构成的角度看：包括了节点和边。是以TCP、IP协议为主支撑的用的人最多的网络。互联网标准：RFC、IETF。<br>从服务的角度看：是分布式应用以及为分布式应用提供通讯的基础设施（方式为API）。  </p><h5 id="协议："><a href="#协议：" class="headerlink" title="协议："></a>协议：</h5><p>不同层有不同协议。传输层：TCP，UDP 网络层：IP，路由选择协议 链路层物理层：…..<br>规范了语法（发请求的格式服从http）、语义（按规范解释报文）、时序（收完之后发）、动作（收、发）。  </p><blockquote><p>协议的定义：<strong>对等层</strong>的实体在通信的过程中应该遵循的规则的集合</p></blockquote><blockquote><p>网络结构：网络边缘（主机，应用程序）、网络核心（互联着的路由器，交换机）、接入网物理媒体（有线，无线通信链路）</p></blockquote><h3 id="1-2网络边缘："><a href="#1-2网络边缘：" class="headerlink" title="1.2网络边缘："></a>1.2网络边缘：</h3><h5 id="应用进程间的通信模式："><a href="#应用进程间的通信模式：" class="headerlink" title="应用进程间的通信模式："></a>应用进程间的通信模式：</h5><p>1.CS模式（客户端服务器模式）web 问题：可扩展性差，超载荷时能力断崖式下降<br>2.P2P模式（对等模式）迅雷 每个节点既是客户端也是服务器</p><h5 id="基础设施为网络应用提供的服务："><a href="#基础设施为网络应用提供的服务：" class="headerlink" title="基础设施为网络应用提供的服务："></a>基础设施为网络应用提供的服务：</h5><p>1.面向连接服务  两个应用进程的通信开始前先建立连接（握手）为后面的通信做好准备 如TCP服务（可靠的：发送的和收到的一样，流量控制：控制接收速度和发送速度，拥塞控制：在堵塞时让发送速度降低）<br>2.无连接服务    不用握手 如UDP服务（不可靠，没有流量控制和拥塞控制，把主机到主机细分为进程到进程，实时）</p><h3 id="1-3网络核心："><a href="#1-3网络核心：" class="headerlink" title="1.3网络核心："></a>1.3网络核心：</h3><h5 id="数据传输的方法："><a href="#数据传输的方法：" class="headerlink" title="数据传输的方法："></a>数据传输的方法：</h5><p><strong>电路交换</strong>：资源独享（保障了性能但会有资源浪费）网络资源被分成片（频分FDM、时分TDM、波分）   连接建立时间长，计算机之间的通信有突发性所以浪费情况严重，可靠性不高导致电路交换不适合计算机之间的通信。<br><strong>分组交换</strong>：主机的带宽资源不分成一个个的片，主机和主机间的通信数据分成一个个组，以组为单位在每个交换机中存储转发（不存储的化会占用线路）。<strong>缺点</strong>：在存储时需要排队。路由器的缓存用完时新来的分组会被抛弃。<strong>优点</strong>：线路可共享</p><h6 id="分组交换作用下的网络核心的关键功能："><a href="#分组交换作用下的网络核心的关键功能：" class="headerlink" title="分组交换作用下的网络核心的关键功能："></a>分组交换作用下的网络核心的关键功能：</h6><p><strong>转发</strong>：局部的将分组从路由器的输入链路转移到输出链路<br><strong>路由</strong>：全局的决定分组采用的源到目标的路径</p><h6 id="分组交换按网络层是否连接分类："><a href="#分组交换按网络层是否连接分类：" class="headerlink" title="分组交换按网络层是否连接分类："></a>分组交换按网络层是否连接分类：</h6><p>数据报方式：分组携带目标主机完整地址，不需要握手<br>虚电路：需要握手建立虚拟电路，每个分组按照虚电路号传输</p><h3 id="1-4接入网和物理媒体："><a href="#1-4接入网和物理媒体：" class="headerlink" title="1.4接入网和物理媒体："></a>1.4接入网和物理媒体：</h3><h5 id="接入方式："><a href="#接入方式：" class="headerlink" title="接入方式："></a>接入方式：</h5><p><strong>modem住宅接入（猫）</strong>电话线接入<br><strong>DSL</strong>电话线带宽一部分用来上网<br><strong>线缆网络</strong>对有线电视线缆进行改造和光纤一起接入，划分带宽用于不同用处<br><strong>无线接入网络</strong>无线LAN，无线局域接入</p><h5 id="物理媒体："><a href="#物理媒体：" class="headerlink" title="物理媒体："></a>物理媒体：</h5><p><strong>同轴电缆</strong>双向<br><strong>光纤光缆</strong>光脉冲，高速，低误码率（不受电磁波干扰），安全<br><strong>无线线缆</strong>无需物理“线缆”。类型：地面微波、LAN、广域无线（基站）、卫星</p><h3 id="1-5Internet结构和ISP"><a href="#1-5Internet结构和ISP" class="headerlink" title="1.5Internet结构和ISP"></a>1.5Internet结构和ISP</h3><blockquote><p>互联网络结构：网络的网络</p></blockquote><p><strong>端系统通过接入ISP连接到互联网，接入ISP必须互联。</strong><br>第一层ISP：节点少，完成全球范围内的覆盖，通过Tier或IXP互相连接。<br>第二层ISP：区域性的可接入第一层ISP也可连接第二层ISP<br>第三层ISP：local ISP，把终端接进来。</p><h5 id="ISP之间的连接："><a href="#ISP之间的连接：" class="headerlink" title="ISP之间的连接："></a>ISP之间的连接：</h5><p>1.POP：高层ISP接入低层ISP<br>2.对等接入：两个对等的ISP互联<br>3.IXP：多个ISP互联互通<br>4.ICP部署自己的专网同时与各级ISP连接</p><h3 id="1-6分组延时、丢失和吞吐量"><a href="#1-6分组延时、丢失和吞吐量" class="headerlink" title="1.6分组延时、丢失和吞吐量"></a>1.6分组延时、丢失和吞吐量</h3><h5 id="分组丢失和延时的原因："><a href="#分组丢失和延时的原因：" class="headerlink" title="分组丢失和延时的原因："></a>分组丢失和延时的原因：</h5><p>分组在通过链路时要排队,队满会被丢弃</p><h5 id="四种分组延时："><a href="#四种分组延时：" class="headerlink" title="四种分组延时："></a>四种分组延时：</h5><p>1.节点处理延时：查路由表等操作（微秒）<br>2.排队延时：在输出链路上等待传输的时间（取决于拥塞程度-流量强度）a=分组到达队列的平均速率，流量强度I=<strong>La/R</strong>，流量强度趋近于1时通行时间无限大，等于0时最小<br>3.传输延时：R=链路带宽，L=分组长度，将分组发送到链路上的时间=<strong>L/R</strong>（低速率的链路会很大微秒到毫秒）<br>4.传播延时：d=物理链路的长度，s=在媒体上的传播速度，传播延时=<strong>d/s</strong>（几微秒到几百毫秒）</p><h5 id="Internet的延时和路由："><a href="#Internet的延时和路由：" class="headerlink" title="Internet的延时和路由："></a>Internet的延时和路由：</h5><p>ICMP互联网控制报文协议 目的IP+TTL（生存时间，第几跳被杀掉然后给源IP发送ICMP报文）+数据<br>RTT（round trip time）往返延迟</p><h5 id="分组丢失："><a href="#分组丢失：" class="headerlink" title="分组丢失："></a>分组丢失：</h5><p>丢失的分组可能会被前一个节点或源端系统重传，或根本不重传。</p><h5 id="吞吐量："><a href="#吞吐量：" class="headerlink" title="吞吐量："></a>吞吐量：</h5><p>单位时间内从源主机向目标主机放出的有效的bit的数量<br>瞬间吞吐量，平均吞吐量(取决于最小的管道)<strong>瓶颈链路</strong>限制了端到端吞吐量。</p><h3 id="1-7协议层次及服务模型"><a href="#1-7协议层次及服务模型" class="headerlink" title="1.7协议层次及服务模型"></a>1.7协议层次及服务模型</h3><h5 id="协议层次："><a href="#协议层次：" class="headerlink" title="协议层次："></a>协议层次：</h5><p><strong>计算机网络是一个复杂的系统</strong><br>功能复杂：数字信号的物理信号承载、点到点、路由、rdt、进程区分、应用等<br>构成元素复杂：主机、路由器、链路、应用、协议、软硬件<br><strong>采用分层的方法来组织实现</strong><br>把复杂的功能分为一个个功能明确的层次，每一层通过层间接口向上层提供服务。<br>通过下层提供的服务实现<strong>协议</strong>（水平的）从而更好地服务上层</p><blockquote><p>服务：低层实体向上层实体提供他们之间的通信的能力（垂直的）<br>服务用户/提供者，服务访问点SAP（区分不同的上层用户）<br>原语（primitive）：<strong>函数</strong>服务提供者通过原语告诉用户我向你提供什么服务</p></blockquote><h5 id="服务类型："><a href="#服务类型：" class="headerlink" title="服务类型："></a>服务类型：</h5><p>面向连接的服务（TCP）：两个用户在使用下层所提供的服务之前要有一个握手的关系要为之后的通信做好准备。<br>无连接的服务（UDP）：两个应用进程在通信前不握手，直接发送信息。</p><blockquote><p>服务和协议的差别：服务是垂直的，协议是水平的。<br>服务和协议的关系：本层协议的实现要借助于下层服务，目的是为了向上层提供更好地服务</p></blockquote><h5 id="数据单元（DU）："><a href="#数据单元（DU）：" class="headerlink" title="数据单元（DU）："></a>数据单元（DU）：</h5><p>SAP：层间接口，SDU（服务数据单元）：上一层交给的要传输的数据，ICI（接口控制信息）：更顺利的穿过层间接口，IDU=SDU+ICI，<strong>PDU（协议数据单元）</strong>：对等层协议交换，SDU+第n层头部信息</p><h5 id="分层处理的好处："><a href="#分层处理的好处：" class="headerlink" title="分层处理的好处："></a>分层处理的好处：</h5><p>概念化：结构清晰，便于标识网络组件以及描述其相互关系。<br>结构化：模块化更易于维护和系统升级，改变某一层不影响其他层。<br><strong>分层有害之处：</strong>一层层实现的效率低</p><h5 id="互联网协议栈："><a href="#互联网协议栈：" class="headerlink" title="互联网协议栈："></a>互联网协议栈：</h5><h6 id="应用层："><a href="#应用层：" class="headerlink" title="应用层："></a>应用层：</h6><p>应用进程通过TCP交到传输层传输给对方的TCP交给对方的应用进程。应用进程就可以通过传输层完成应用报文的交互从而实现想干的事。<br><strong>常见协议：</strong>FTP、SMTP、HTTP<br><strong>协议数据单元：</strong>报文（message）</p><h6 id="传输层："><a href="#传输层：" class="headerlink" title="传输层："></a>传输层：</h6><p>借助于网络层主机到主机的服务，完成进程到进程的区分。把网络层提供的不可靠的服务变成可靠的。<br><strong>常见协议：</strong>TCP、UDP<br><strong>协议数据单元：</strong>报文段（segment）：TCP段、UDP段</p><h6 id="网络层："><a href="#网络层：" class="headerlink" title="网络层："></a>网络层：</h6><p>在链路层提供的相邻两点的数据传输的基础之上，传输以分组为单位的<strong>端到端</strong>（源主机到目标主机）的数据传输。（E2E）<br><strong>常见协议：</strong>IP协议、路由选择协议<br><strong>协议数据单元：</strong>分组（packet），如果<strong>无连接方式（IP网络）</strong>：数据报（datagram）</p><h6 id="链路层："><a href="#链路层：" class="headerlink" title="链路层："></a>链路层：</h6><p>在物理层提供的服务的基础之上，在相邻的两点之间传输以帧为单位的数据。（P2P）<br><strong>常见协议：</strong>PPP，以太网协议、WLAN协议<br><strong>协议数据单元：</strong>帧（frame）</p><h6 id="物理层："><a href="#物理层：" class="headerlink" title="物理层："></a>物理层：</h6><p>把数字信号转换成物理信号承载在媒体之上，从一点传到相邻的另一点，对方的物理层再把物理信号转换成数字信号。（以bit为单位）<br><strong>协议数据单元：</strong>位（bit）</p><h5 id="ISO-OSI参考模型（七层模型）："><a href="#ISO-OSI参考模型（七层模型）：" class="headerlink" title="ISO/OSI参考模型（七层模型）："></a>ISO/OSI参考模型（七层模型）：</h5><p>在应用层和传输层之间加了表示层（表示转换）、会话层（会话管理）</p><h5 id="封装和解封装："><a href="#封装和解封装：" class="headerlink" title="封装和解封装："></a>封装和解封装：</h5><p>在源主机进行封装传输，到某个路由器进行下三层（物理层，链路层，网络层）的解封装与封装，到某个交换机进行下两层的解封装和封装，到目标主机进行全部的解封装</p><h2 id="第二章-应用层"><a href="#第二章-应用层" class="headerlink" title="第二章 应用层"></a>第二章 应用层</h2><blockquote><p>目标:掌握计算机网络应用的原理,网络应用协议的概念和实现方面.(传输层的服务模型,客户-服务器模式,对等模式)了解网络应用的实例,互联网流行的应用层协议.(HTTP,FTP,SMTP,DNS)编程</p></blockquote><h3 id="2-1应用层协议原理"><a href="#2-1应用层协议原理" class="headerlink" title="2.1应用层协议原理"></a>2.1应用层协议原理</h3><blockquote><p>一些网络应用的例子:E-mail,Web,文本信息,远程登陆,P2P文件共享,即时通信,多用户网络游戏,流媒体(youtube),Internet电话,实时电视会议,社交网络,搜索</p></blockquote><h5 id="网络应用的体系架构"><a href="#网络应用的体系架构" class="headerlink" title="网络应用的体系架构:"></a>网络应用的体系架构:</h5><p>1.客户端-服务器(C/S)模式<br>服务器一直运行且固定IP,客户端主动与服务器通信且IP不固定.<strong>问题</strong>可扩展性差,服务器宕机服务就无法享受.<br>2.P2P结构<br>几乎没有一直运行的服务器,任意端系统之间可以进行通信,每一个节点既是客户端也是服务器,参与的主机间歇性连接且可以改变IP地址,自扩展性.<strong>问题</strong>管理起来困难.<br>3.混合体<br>Napster:主机在中心服务器上注册其资源,主机向中心服务器查询资源位置,通过P2P传输</p><h5 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信:"></a>进程通信:</h5><p><strong>进程</strong>在主机上运行的应用进程<br>发起通信的进程叫客户端进程,等待连接的进程叫服务器进程.同一主机内,使用进程间通信机制通信.不同主机,通过交换报文来通信.<br><strong>分布式进程通信需要解决的问题</strong>1.进程标示和寻址问题2.传输层-应用层如何提供服务3.如何使用传输层提供的服务,实现应用进程之间的报文交换,实现应用,定义协议.<br>问题一:进程用IP地址和端口号标示<br>问题二:传输层提供的服务-需要穿过层间的信息(要传输的报文,源地址,目标地址),传输层实体根据信息进行报文段的封装.<br>TCP socket,用一个整数表示两个实体之间的通信关系(四元组)具有本地意义,唯一指定一个会话.<br>UDP socket,用一个整数表示本应用实体的标示,代表本地的IP和端口不代表一个会话,但传输时必须提供对方的IP和端口<br>问题三:定义应用层协议,应用协议只是应用的一部分.公开协议/私有协议.<br>传输层向应用层提供的服务的性能指标:可靠性,延迟,吞吐量,安全性<br>互联网传输层提供的服务:TCP(可靠的,流量控制发送方不会淹没接收方,拥塞控制抑制发送方,不能提供时间保障,最小吞吐量保障,安全保障)/UDP(不可靠的,没有流量控制等,<strong>省时</strong>)<br>因为TCP和UDP都不安全,跑在TCP之上的SSL提供了安全性(提供了私密性,完整性,端到端的鉴别)</p><h3 id="2-2Web-and-HTTP"><a href="#2-2Web-and-HTTP" class="headerlink" title="2.2Web and HTTP"></a>2.2Web and HTTP</h3><h5 id="Web："><a href="#Web：" class="headerlink" title="Web："></a>Web：</h5><p>Web页由一些对象组成。对象可以是HTML文件、JPEG图像等。通过URL对每个对象进行引用，<strong>URL格式：Prot（协议名）：//user（用户）:psw（口令）@<a href="http://www.someschool.edu(主机名)/someDept%EF%BC%88%E8%B7%AF%E5%BE%84%E5%90%8D%EF%BC%89/pic.gif:port%EF%BC%88%E7%AB%AF%E5%8F%A3%EF%BC%89">www.someSchool.edu（主机名）/someDept（路径名）/pic.gif:port（端口）</a></strong></p><h5 id="HTTP："><a href="#HTTP：" class="headerlink" title="HTTP："></a>HTTP：</h5><p>超文本传输协议。先建立TCP连接，端口号为80，浏览器向web服务器发送http报文，然后受到回复。HTTP是无状态的，服务器并不维护关于客户的任何信息</p><h6 id="非持久HTTP："><a href="#非持久HTTP：" class="headerlink" title="非持久HTTP："></a>非持久HTTP：</h6><p>客户端向服务器发送连接建立请求，服务器在80端口上等待请求，接受连接并通知客户端，客户端向TCP连接的套接字发送HTTP请求报文，HTTP服务器收到报文并向客户端发送响应报文，客户端收到响应报文。<br>往返时间RTT：一个小分组从客户端到服务器再回到客户端的时间。一个RTT用来发起TCP连接，一个RTT用来HTTP请求并等待HTTP响应<br>非持久的缺点：每个对象都要两个RTT的时间</p><h6 id="持久HTTP："><a href="#持久HTTP：" class="headerlink" title="持久HTTP："></a>持久HTTP：</h6><p>服务器在发送响应后仍保持TCP连接。<br>非流水方式：客户端只能在收到前一个响应之后才能发出请求。<br>流水方式：客户端遇到一个引用对象就立即产生一个请求。</p><h6 id="HTTP请求报文："><a href="#HTTP请求报文：" class="headerlink" title="HTTP请求报文："></a>HTTP请求报文：</h6><p>请求行（GET、POST、HEAD命令）+首部行</p><h6 id="提交表单输入："><a href="#提交表单输入：" class="headerlink" title="提交表单输入："></a>提交表单输入：</h6><p>POST方式、URL方式</p><h6 id="HTTP响应报文："><a href="#HTTP响应报文：" class="headerlink" title="HTTP响应报文："></a>HTTP响应报文：</h6><p>状态行（协议版本，状态码，相应状态信息）+首部行+数据</p><h6 id="用户-服务器状态：cookie"><a href="#用户-服务器状态：cookie" class="headerlink" title="用户-服务器状态：cookie"></a>用户-服务器状态：cookie</h6><p>四个组成部分：<br>1、在HTTP响应报文中有一个cookie的首部行<br>2、在HTTP请求报文中有一个cookie的首部行<br>3、在用户端系统中保留有一个cookie文件<br>4、在web站点有一个后端数据库<br>可以用户验证，购物车，推荐，用户状态</p><h6 id="Web缓存（代理服务器）："><a href="#Web缓存（代理服务器）：" class="headerlink" title="Web缓存（代理服务器）："></a>Web缓存（代理服务器）：</h6><p>用户通过缓存访问Web。降低客户端的请求响应时间，可以减少一个机构内部网络与Internet接入链路上的流量，可以使较弱的ICP也能够有效提供内容</p><h6 id="条件GET方法："><a href="#条件GET方法：" class="headerlink" title="条件GET方法："></a>条件GET方法：</h6><p>如果缓存器中的对象拷贝是最新的，就不要发送对象</p><h3 id="2-3FTP"><a href="#2-3FTP" class="headerlink" title="2.3FTP"></a>2.3FTP</h3><p>文件传输协议。客户端包括用户接口，本地文件接口。服务器端口为21.<br><strong>控制连接与数据连接分开</strong>FTP客户端与FTP服务器通过21端口联系，并使用TCP为传输协议。客户端通过控制连接获得身份认证。客户端通过控制连接发送命令。服务器收到命令，跟客户端的20端口主动建立数据连接，并传输文件<br><strong>有状态</strong></p><h3 id="2-4Email，SMTP，POP3，IMAP"><a href="#2-4Email，SMTP，POP3，IMAP" class="headerlink" title="2.4Email，SMTP，POP3，IMAP"></a>2.4Email，SMTP，POP3，IMAP</h3><h5 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h5><p>三个组成部分：用户代理，邮件服务器，简单邮件传输协议（SMTP）</p><h6 id="用户代理"><a href="#用户代理" class="headerlink" title="用户代理"></a>用户代理</h6><p>撰写邮件的软件Outlook</p><h6 id="邮件服务器"><a href="#邮件服务器" class="headerlink" title="邮件服务器"></a>邮件服务器</h6><p>守候在25端口，用SMTP协议发送邮件，接受邮件到客户端邮箱（用邮件拉取协议）</p><h6 id="SMTP协议"><a href="#SMTP协议" class="headerlink" title="SMTP协议"></a>SMTP协议</h6><p>使用TCP在客户端和服务器之间传送报文，端口号为25.传输的三个阶段：握手，传输报文，关闭。持久连接，要求报文为七位ASCII编码，HTTP是拉，SMTP是推<br><strong>邮件报文格式</strong>首部行（To，From，CC）+主体<br>MIME：多媒体扩展（使能传输中文等）</p><h6 id="邮件访问协议："><a href="#邮件访问协议：" class="headerlink" title="邮件访问协议："></a>邮件访问协议：</h6><p>从服务器访问协议（拉）<br>POP3：用户确认阶段 客户端命令（user，pass），服务器响应（OK，ERR）。事务处理阶段，客户端向服务器发出指令。无状态的<br>IMAP（提供远程目录维护）服务器将每个报文与一个文件夹联系。有状态的。<br>HTTP</p><h3 id="2-5DNS"><a href="#2-5DNS" class="headerlink" title="2.5DNS"></a>2.5DNS</h3><p>域名解析系统</p><h5 id="DNS的必要性："><a href="#DNS的必要性：" class="headerlink" title="DNS的必要性："></a>DNS的必要性：</h5><p>IP地址标识主机、路由器。但IP地址不好记，所以人类用户可以使用字符串<strong>域名</strong>交给DNS交换成IP地址。</p><h5 id="DNS的总体思路和目标"><a href="#DNS的总体思路和目标" class="headerlink" title="DNS的总体思路和目标"></a>DNS的总体思路和目标</h5><p>主要思路：<br>分层的、基于域的命名机制<br>若干分布式的数据库完成名字到IP的转换<br>运行在UDP之上端口号为53的应用服务<br>核心的Internet功能，但以应用层协议实现<br>主要目标：<br>实现主机域名-IP地址的转换<br>主机别名到规范名字的转换<br>邮件服务器别名到邮件服务器的正规名字的转换<br>负载均衡</p><h5 id="DNS需要解决的问题："><a href="#DNS需要解决的问题：" class="headerlink" title="DNS需要解决的问题："></a>DNS需要解决的问题：</h5><h6 id="1-如何命名设备"><a href="#1-如何命名设备" class="headerlink" title="1.如何命名设备"></a>1.如何命名设备</h6><p>用有意义的字符串，分层化命名<br>DNS域名结构：<br>采用层次树状结构命名<br>Internet根被划分为几百个顶级域。通用的：.com，.edu等 国家的.cn等。每个子域下面可划分为若干个子域。树叶是主机。<br>根有十几个<br><strong>域名</strong>：从本域往上走直到树根<br>域名管理：<br>一个域管理其下的子域<br>域与物理网络无关：<br>域遵从组织界限。一个域的主机可以不在一个网络。</p><h6 id="2-如何完成名字到IP的转换"><a href="#2-如何完成名字到IP的转换" class="headerlink" title="2.如何完成名字到IP的转换"></a>2.如何完成名字到IP的转换</h6><p>分布式的数据库维护和响应名字查询<br>将DNS名字空间划分为互不相交的区域，每个区域都是树的一部分。每个区域都有一个名字服务器，名字服务器允许被放置在区域外<br>TDL服务器：顶级域服务器，负责顶级域名<br>区域名字服务器维护资源记录（域名-IP的映射关系）格式：域名+生存时间+Class类别+Value值+TYPE类别<br>TYPE=：<br>A name为主机，value为IP地址<br>NS name为域名，value为该域名的权威服务器的域名<br>CNAME 那么为规范名字的别名，value为规范名字<br>MX value为name对于的邮件服务器的名字<br>TTL：<br>生存时间，决定了资源记录应当从缓存中删除的时间<br>DNS工作过程：<br>应用调用解析器<br>解析器作为客户向Name Server发出查询报文<br>Name Server返回响应报文<br>递归查询：往上找直到根服务器，会使根服务器负担太重<br>迭代查询：根服务器返回下一个NS的地址<br>DNS协议，报文<br>DNS协议：查询和响应报文的报文格式相同<br>报文首部：标识符（ID）16位+flags</p><h6 id="3-如何维护"><a href="#3-如何维护" class="headerlink" title="3.如何维护"></a>3.如何维护</h6><p>增加或删除一个域，需要在域名系统中做哪些工作<br>新增一个域：<br>在上级域的名字服务器中增加两条记录，指向这个新增的子域的域名和域名服务器的地址。在新增的子域的名字服务器上运行名字服务器，负责本域的名字解析</p><h3 id="2-6P2P应用"><a href="#2-6P2P应用" class="headerlink" title="2.6P2P应用"></a>2.6P2P应用</h3><h5 id="C-S-VS-P2P"><a href="#C-S-VS-P2P" class="headerlink" title="C/S VS P2P"></a>C/S VS P2P</h5><h6 id="文件分发："><a href="#文件分发：" class="headerlink" title="文件分发："></a>文件分发：</h6><p>C/S:<br>都是由服务器发送给peer，服务器必须顺序传输N个文件拷贝。每个客户端必须下载一个文件拷贝。文件过多时服务器上载带宽成为瓶颈。文件少时客户端的下载能力成为瓶颈。下载时间线性增加<br>P2P：<br>服务器最少上载一份拷贝，每个客户端必须下载一个拷贝，所有客户端总体下载量NF。下载时间平缓增加。</p><blockquote><p>overlay邻居间的文件的上下载的协作关系<br>非结构化P2P：集中式目录（每个结点向目录服务器注册）、完全分布式（每个节点构建一个overlay，邻居向邻居发起查询）、混合体（每个节点属于一个组且存在组长，组长和组长之间相当于邻居，组长对于组员就是目录服务器）<br>DHT（结构化P2P）：每个节点之间可以构成环、树的关系</p></blockquote><h3 id="2-7CDN"><a href="#2-7CDN" class="headerlink" title="2.7CDN"></a>2.7CDN</h3><h5 id="多媒体流化服务："><a href="#多媒体流化服务：" class="headerlink" title="多媒体流化服务："></a>多媒体流化服务：</h5><p>DASH（动态自适应流化技术）<br>服务器将视频文件分割成多个块，每个块独立储存。告示文件会提供不同块的URL。客户端先获取告示文件，周期性地测量服务器到客户端地带宽，查询告示文件，在一个时刻请求一个块，HTTp头部指定字节范围，如果带宽足够选择码率最大的视频块</p><h5 id="CDN："><a href="#CDN：" class="headerlink" title="CDN："></a>CDN：</h5><p>全网部署缓存节点，存储服务内容，就近为用户提供服务。<br>enter deep：将CDN服务器深入到许多接入网<br>bring home：部署在少数关键位置，如将服务器簇安装在POP附近</p><h3 id="2-8TCP套接字（Socket）编程"><a href="#2-8TCP套接字（Socket）编程" class="headerlink" title="2.8TCP套接字（Socket）编程"></a>2.8TCP套接字（Socket）编程</h3><p>应用进程使用传输层提供的服务才能交换报文实现应用协议</p><blockquote><p>套接字：应用进程与端到端传输协议（TCP或UDP）之间的门户</p></blockquote><blockquote><p>目标：学习如何构建能借助sockets进行通信的C/S应用程序</p></blockquote><p>TCP提供可靠的、字节流的服务<br>服务器：<br>服务器先运行，创建欢迎socket，和本地端口绑定，在欢迎socket上阻塞式等待接收用户的连接<br>客户端：<br>客户端主动和服务器建立连接，创建客户端本地套接字绑到本地port上，指定服务器进程的IP地址和端口号，与服务器进程连接，连接API调用有效时，客户端与服务器建立了TCP连接。<br>客户端连接请求到来时<br>服务器接受来自用户端的请求，解除阻塞式等待，返回一个新的socket与客户端通信。允许服务器与多个客户端通信。使用源IP和源端口来区分不同的客户端</p><h5 id="结构体："><a href="#结构体：" class="headerlink" title="结构体："></a>结构体：</h5><p><strong>sockaddr_in</strong>:放IP、端口<br>sin_family-&gt;地址簇<br>sin_port-&gt;port<br>sin_addr-&gt;IP地址<br>sin_zero[8]-&gt;对其<br><strong>host_ent</strong>:域名解析函数，输入域名输出IP地址<br>*h_name-&gt;主机域名<br>**h_aliases-&gt;主机别名<br>h_length-&gt;地址长度<br>**h_addr_list[0]-&gt;IP列表</p><h3 id="2-9UDP套接字编程"><a href="#2-9UDP套接字编程" class="headerlink" title="2.9UDP套接字编程"></a>2.9UDP套接字编程</h3><p>没有握手，发送端在每一个报文中明确地指定目标的IP地址和端口号，服务器必须从收到的分组中提取出发送端的IP地址和端口号，<br>UDP提供不可靠的服务</p><h2 id="第三章-传输层"><a href="#第三章-传输层" class="headerlink" title="第三章 传输层"></a>第三章 传输层</h2><blockquote><p>目标：理解传输层的工作原理：多路复用/解复用，可靠数据传输，流量控制，拥塞控制。学习传输层协议：TCP、UDP</p></blockquote><h3 id="3-1概述和传输层协议"><a href="#3-1概述和传输层协议" class="headerlink" title="3.1概述和传输层协议"></a>3.1概述和传输层协议</h3><p>为运行在不同主机上的应用进程提供逻辑通信。<br>发送方：将应用层的报文分成报文段，然后传递给网络层<br>接收方：将报文段重组成报文，然后传递给应用层</p><p>传输层VS网络层<br>网络层服务：<br>主机间的逻辑通信<br>传输层服务：<br>依赖于网络层的服务（延时，带宽）<br>并对网络层的服务进行增强（数据丢失，顺序混乱，加密）</p><h3 id="3-2多路复用和解复用"><a href="#3-2多路复用和解复用" class="headerlink" title="3.2多路复用和解复用"></a>3.2多路复用和解复用</h3><p>在发送方多路复用：<br>从多个套接字接受来自多个进程的报文，根据套接字对应的IP地址和端口号等信息对报文段用头部加以封装（该头部信息用于以后的解复用）<br>在接收端多路解复用：<br>根据报文段的头部信息中的IP地址和端口号将接收到的报文段发给正确的套接字（和对应的应用程序）</p><h3 id="3-3无连接传输：UDP"><a href="#3-3无连接传输：UDP" class="headerlink" title="3.3无连接传输：UDP"></a>3.3无连接传输：UDP</h3><p>报文可能丢失、乱序<br>没有握手，每个UDP报文段都被独立的处理<br>UDP被用于流媒体，DNS，SNMP<br>UDP实现可靠传输的方式：在应用层增加可靠性，应用特定的差错恢复<br><strong>协议构成</strong>：<br>八个字节的头部：<br>源端口号（2）、目的端口号（2）、报文长度、校验和EDC<br>报文<br><strong>优点</strong>：<br>减少延时、简单、头部小（开销小）、尽可能快的发送报文段<br><strong>UDP校验和</strong>：<br>检测在被传输报文段中的差错<br>发送方：<br>将报文段的内容视为16bit的整数<br>校验和：报文段的加法和<br>发送方将校验和放在UDP的校验和字段<br>接收方：<br>计算接收到的报文段的校验和<br>检查计算出的校验和与校验和字段的内容是否相等<br><img src="/img/%E6%A0%A1%E9%AA%8C%E5%92%8C.png" alt="这是图片" title="Magic Gardens"></p><h3 id="3-4可靠数据传输（rdt）的原理"><a href="#3-4可靠数据传输（rdt）的原理" class="headerlink" title="3.4可靠数据传输（rdt）的原理"></a>3.4可靠数据传输（rdt）的原理</h3><blockquote><p>rdt在应用层，传输层和数据链路层都很重要<br>是网络top10问题<br>信道的不可靠特点决定了可靠数据传输（rdt）的复杂性</p></blockquote><h5 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h5><p><strong>步骤</strong>：<br>上层用rdt_send()将数据封装并交给下方的发送实体。<br>实体用udt_send()将分组放到信道上传输给接收方<br>接收方实体用udt_rcv()将分组接受<br>上层用deliver_data()将数据接受</p><p><strong>我们将</strong>：<br>渐增式地开发可靠数据传输协议地发送方和接收方<br>只考虑单向数据传输（但控制信息是双向流动的）<br>双向的数据传输问题其实是两个单向数据传输问题的综合<br>使用有限状态机（FSM）来描述发送方和接收方</p><h6 id="Rdt1-0："><a href="#Rdt1-0：" class="headerlink" title="Rdt1.0："></a>Rdt1.0：</h6><p>在可靠信道上的可靠数据传输<br><strong>下层的信道是完全可靠的</strong><br>没有比特出错<br>没有分组丢失<br><strong>发送方和接收方的FSM</strong><br>发送方将数据发送到下层信道<br>接收方从下层信道接收数据</p><blockquote><p>rdt1.0只干了封装解封装的事</p></blockquote><h6 id="Rdt2-0"><a href="#Rdt2-0" class="headerlink" title="Rdt2.0:"></a>Rdt2.0:</h6><p>具有比特差错的信道<br><strong>下层信道可能会出错：将分组中的比特翻转</strong><br>用校验和来检测比特出错<br><strong>怎样从差错中恢复</strong><br>确认（ACK）：接收方显式地告诉发送方分组已被正确接收<br>否定确认（NAK）：接收方显式地告诉发送方分组发生了差错<br><strong>rdt2.0中的新机制：采用差错控制编码进行差错控制</strong><br>发送方差错控制编码：缓存<br>接收方使用编码检错<br>接收方的反馈：控制报文（ACK，NAK）<br>发送方收到反馈相应的动作</p><h6 id="Rdt2-1："><a href="#Rdt2-1：" class="headerlink" title="Rdt2.1："></a>Rdt2.1：</h6><p><strong>考虑到ACK/NAK出错的情况</strong><br>让发送方在每个分组中加入序号<br>如果ACK/NAK出错，发送方重传当前分组</p><h6 id="Rdt2-2："><a href="#Rdt2-2：" class="headerlink" title="Rdt2.2："></a>Rdt2.2：</h6><p><strong>无NAK的协议</strong><br>把当前分组的反向确认用前一分组的正向确认代替</p><h6 id="Rdt3-0："><a href="#Rdt3-0：" class="headerlink" title="Rdt3.0："></a>Rdt3.0：</h6><p><strong>假设下层信道可能会丢失分组</strong><br>会死锁</p><p>方法：<br>发送端超时重传：经过一段时间没有收到ACK就重传<br>问题:<br>如果ACK只是被延迟了，重传将会导致数据重复，但利用序列号已经可以解决这个问题，接收方必须指明被正确接收的序列号<br>需要一个倒计数定时器</p><p>rdt3.0可以工作但链路容量比较大的情况下，性能很差（一次发一个PDU不能够充分利用链路的传输能力）<br>瓶颈在于：协议限制</p><p>解决：流水线协议，一次发送多个未经确认的分组<br><strong>增加序号的范围：用多个bit表示分组的序号</strong><br><strong>在发送方/接收方要有缓冲区</strong><br>发送方缓冲：未得到确认，可能需要重传<br>接收方缓存：上层用户取用数据的速率、接收到的数据速率，接收方的数据可能乱序<br><strong>两种通用的流水线协议</strong>：<br>回退N步（GBN）和选择重传（SR）</p><p><strong>滑动窗口（slide window）协议</strong>：<br><strong>发送缓冲区</strong>：<br>形式：内存中的一个区域，落入缓冲区的分组可以发送<br>功能：用于存放已发送，但是没有得到确认的分组<br>必要性：需要重发时可用<br><strong>发送缓冲区的大小（一次发送多少分组）</strong>：<br>停止等待协议=1<br>流水线协议&gt;1 不能很大<br><strong>发送缓冲区中的分组</strong>：<br>未发送的：落入发送缓冲区的分组，可以连续发送出去<br>已经发送的：等待对方确认的分组，发送缓冲区的分组只有得到确认才能删除<br><strong>发送窗口</strong>：发送缓冲区内容的一个范围<br>那些已发送但是未经确认分组的序号构成的空间<br>发送窗口的最大值&lt;=发送缓冲区的值<br>一开始：没有发送任何一个分组<br>后沿=前沿<br>之间为发送窗口的尺寸=0<br>每发送一个分组，前沿前移一个单位<br>**接收窗口（接收缓冲区）**：<br>接收窗口用于控制哪些分组可以接收：<br>只有收到的分组序号落入接收窗口内才允许接收<br>若序号在接收窗口外就丢弃<br>接收窗口尺寸Wr=1,则只能顺序接收 **GBN** 累计确认<br>接收窗口尺寸Wr&gt;1,则可以乱序接收 <strong>SR</strong> 独立确认（不能确定前面的分组是否到来）</p><p><strong>GBN和SR的异同</strong>：<br>同：<br>发送窗口&gt;1<br>不同：<br>GBN：<br>接收窗口=1<br>接收端只能顺序接收<br>重发要发整个窗口<br>SR：<br>接收窗口&gt;1<br>接收端可以乱序接收<br>重发只要发一个分组<br><strong>对比GBN和SR</strong>：<br>出错率低的时候适合GBN，链路容量大时适合SR</p><h3 id="3-5面向连接的传输TCP"><a href="#3-5面向连接的传输TCP" class="headerlink" title="3.5面向连接的传输TCP"></a>3.5面向连接的传输TCP</h3><p><strong>概述</strong>：<br>点对点，可靠的、按顺序的字节流，管理化（流水线），发送和接收缓存，全双工数据，面向连接，有流量控制<br><strong>TCP报文段结构</strong>：<br><img src="/img/TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E7%BB%93%E6%9E%84.png" alt="这是图片" title="Magic Gardens"></p><blockquote><p>序号：<br>报文段首字节的在字节流的编号<br>确认号：<br>期望从另一方收到的下一字节的序号</p></blockquote><p><strong>TCP在IP不可靠服务的基础上建立了rdt</strong><br>管道化的报文段<br>累计确认<br>单个重传定时器</p><h5 id="TCP发送方事件："><a href="#TCP发送方事件：" class="headerlink" title="TCP发送方事件："></a>TCP发送方事件：</h5><p><strong>从应用层接收数据</strong><br>用nextseq创建报文段<br>序号nextseq为报文段首字节的字节流编号<br>如果还没有运行，启动定时器<br><strong>超时</strong><br>重传后沿最老的报文段<br>重启定时器<br><strong>收到确认</strong><br>如果是对尚未确认的报文段确认：<br>更新已被确认的报文序号<br>如果当前还有未确认的报文段，重新启动定时器</p><h3 id="3-6拥塞控制原理"><a href="#3-6拥塞控制原理" class="headerlink" title="3.6拥塞控制原理"></a>3.6拥塞控制原理</h3><p><strong>拥塞</strong>：<br>太多的数据需要网络传输，超过了网络的处理能力<br><strong>拥塞的表现</strong>：<br>分组丢失（路由器缓冲区溢出）<br>分组经历比较长的延迟（在路由器的队列中排队）</p><h5 id="拥塞的原因-代价："><a href="#拥塞的原因-代价：" class="headerlink" title="拥塞的原因/代价："></a>拥塞的原因/代价：</h5><p>场景1：<br>两个发送端，两个接收端<br>一个路由器具有无限大的缓冲<br>输入链路带宽：R<br>没有重传<br>场景2：<br>一个路由器，有限的缓冲<br>分组丢失时，发送端重传<br>场景3：<br>四个发送端<br>多重路径<br>超时重传</p><h5 id="拥塞控制方法："><a href="#拥塞控制方法：" class="headerlink" title="拥塞控制方法："></a>拥塞控制方法：</h5><p><strong>端到端拥塞控制</strong>：<br>没有来自网络的显示反馈<br>端系统根据延迟和丢失事件推断是否有拥塞<br>TCP采用的方法<br><strong>网络辅助的拥塞控制</strong>：<br>路由器提供给端系统以反馈信息<br>单个bit置位，显示有拥塞<br>显式提供发送端可以采用的速率</p><h3 id="3-7TCP拥塞控制"><a href="#3-7TCP拥塞控制" class="headerlink" title="3.7TCP拥塞控制"></a>3.7TCP拥塞控制</h3><p>机制：<br>端到端的拥塞控制机制<br>路由器不向主机发送有关拥塞的反馈信息，路由器的负担较轻，符合网络核心简单的TCP/IP架构原则<br>端系统根据自身得到的信息，判断是否发生拥塞，从而采取动作</p><blockquote><p>拥塞控制的几个问题：<br>如何检测拥塞？<br>轻微拥塞<br>拥塞<br>控制策略：<br>在拥塞发生时如何动作？降低速率<br>在拥塞缓解时如何动作？增加速率</p></blockquote><p><strong>发送端如何探测到拥塞？</strong><br>1.某个段超时<br>2.有关某个段的三个冗余ACK</p><p><strong>如何控制发送端发送的速率？</strong><br>超时：把拥塞窗口变为1MSS，进入慢启动阶段然后再倍增到CongWin/2（每个RTT），从而进入CA阶段<br>3个重复ACK：CongWin降为1/2，CA阶段</p><h2 id="第四章-网络层：数据平面"><a href="#第四章-网络层：数据平面" class="headerlink" title="第四章 网络层：数据平面"></a>第四章 网络层：数据平面</h2><blockquote><p>目标：理解网络层数据平面的基本原理：网络服务模型、转发和路由（传统方式和SDN方式）、路由器工作原理、通用转发。互联网中网络层协议的实例和实现</p></blockquote><h3 id="4-1导论"><a href="#4-1导论" class="headerlink" title="4.1导论"></a>4.1导论</h3><h5 id="网络层提供的服务"><a href="#网络层提供的服务" class="headerlink" title="网络层提供的服务:"></a>网络层提供的服务:</h5><p>在发送主机和接收主机之间传送段（segment）<br>在发送端将段封装到数据报中<br>在接收端将段上交给传输层实体<br>网络层协议存在于每一个主机和路由器<br>路由器检查每一个经过它的IP数据报头部</p><h5 id="网络层的关键功能"><a href="#网络层的关键功能" class="headerlink" title="网络层的关键功能:"></a>网络层的关键功能:</h5><p><strong>转发（数据平面）</strong>：<br>将分组从路由器的输入接口转发到合适的输出接口<br><strong>路由（控制平面）</strong>：<br>决定分组从发送主机到目标接收主机的路径</p><h5 id="数据平面、控制平面："><a href="#数据平面、控制平面：" class="headerlink" title="数据平面、控制平面："></a>数据平面、控制平面：</h5><p><strong>数据平面</strong>：<br>本地，每个路由器功能<br>决定从路由器输入端口到达的分组如何转发到输出端口<br>转发功能：<br>传统方式：基于目标地址+转发表<br>SDN方式：基于多个字段+流表<br><strong>控制平面</strong>：<br>网络范围内的逻辑<br>决定数据报如何在路由器之间路由、决定数据报从源到目标主机之间的端到端路径<br>2个控制平面方法：<br>传统的路由算法：在路由器中被实现<br>SDN：在远程的服务器中实现</p><h5 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h5><p>传统方式实现：控制平面生成路由表，数据平面IP协议根据路由表进行操作。<br>SDN方式实现：网络操作系统算出流表，通过南向接口传给交换设备，交换设备将流表装载，对到来的分组进行匹配，然后对分组做转发、阻塞、泛洪等操作。</p><h5 id="网络服务模型："><a href="#网络服务模型：" class="headerlink" title="网络服务模型："></a>网络服务模型：</h5><p>从发送方主机到接收方主机传输数据报的“通道”，网络提供什么样的服务模型？<br><strong>对于单个数据报的服务</strong>：<br>可靠传送<br>延迟保证，如：少于40ms的延迟<br><strong>对于数据报流的服务</strong>：<br>保序数据报传送<br>保证流的最小宽度<br>分组之间的延迟差</p><h5 id="网络层和传输层连接服务区别："><a href="#网络层和传输层连接服务区别：" class="headerlink" title="网络层和传输层连接服务区别："></a>网络层和传输层连接服务区别：</h5><p>网络层：（有连接）在两个主机之间，涉及到路径上的一些路由器<br>传输层：（面向连接）在两个进程之间，很可能只体现在端系统上（TCP连接）</p><h3 id="4-2路由器组成"><a href="#4-2路由器组成" class="headerlink" title="4.2路由器组成"></a>4.2路由器组成</h3><h5 id="路由器结构概况："><a href="#路由器结构概况：" class="headerlink" title="路由器结构概况："></a>路由器结构概况：</h5><p>路由：运行路由选择算法/协议生成路由表<br>转发：从输入到输出链路交换数据报-根据路由表进行分组的转发</p><h5 id="输入端口功能"><a href="#输入端口功能" class="headerlink" title="输入端口功能"></a>输入端口功能</h5><p>分布式交换：<br>根据数据报头部的信息如：目的地址，在输入端口内存中的转发表中查找合适的输出端口<br>基于目标的转发：仅仅依赖于IP数据报的目标IP地址<br>通用转发：基于头部字段的任意集合进行转发</p><h5 id="输入端口缓存"><a href="#输入端口缓存" class="headerlink" title="输入端口缓存"></a>输入端口缓存</h5><p>当交换机的速率小于输入输出端口的汇聚速率时-&gt;在输入端口可能要排队<br>HOL blocking：排在队头的数据报阻止了队列中其他数据向前移动</p><h5 id="交换结构"><a href="#交换结构" class="headerlink" title="交换结构"></a>交换结构</h5><p>将分组从输入缓冲区传输到合适的输出端口<br>交换速率：分组可以按照该速率从输入传输到输出<br><strong>三种交换机构</strong>：<br>基于memory（内存），bus（总线），crossbar（互联网络）</p><h5 id="输出端口"><a href="#输出端口" class="headerlink" title="输出端口"></a>输出端口</h5><p>当数据报从交换机构的到达速度比传输速率快就需要输出端口缓存<br>由调度规则选择排队的数据报进行传输</p><h5 id="输出端口排队"><a href="#输出端口排队" class="headerlink" title="输出端口排队"></a>输出端口排队</h5><p>当多个输入端口同时向输出端口发送时，缓冲该分组<br>排队带来延迟，由于输出端口缓存溢出则丢弃数据报</p><h5 id="调度机制"><a href="#调度机制" class="headerlink" title="调度机制"></a>调度机制</h5><p>调度：选择下一个要通过链路传输的分组<br>FIFO：按照分组到来的次序发送</p><h5 id="调度策略："><a href="#调度策略：" class="headerlink" title="调度策略："></a>调度策略：</h5><p>优先权：<br>先发送最高优先权的分组<br>Round Robin：<br>每个类在每一个循环中获得不同权重的服务量</p><h3 id="4-3IP协议"><a href="#4-3IP协议" class="headerlink" title="4.3IP协议"></a>4.3IP协议</h3><h5 id="IP分片和重组"><a href="#IP分片和重组" class="headerlink" title="IP分片和重组"></a>IP分片和重组</h5><p>网络链路由MTU（最大传输单元）-链路层帧所携带的最大数据长度<br>不同的链路类型由不同的MTU</p><p>大的IP数据报在网络上被分片<br>一个数据报被分割成若干个小的数据报<br>相同的IP<br>不同的偏移量<br>最后一个分片标记为0<br>重组只在最终的目标主机进行<br>IP头部的信息用于标记，排序相关的分片</p><h5 id="IP编址：引论"><a href="#IP编址：引论" class="headerlink" title="IP编址：引论"></a>IP编址：引论</h5><p>IP地址：32位标示<br>接口：主机/路由器和物理链路的连接处<br>一个IP地址和一个接口相关联</p><h5 id="子网"><a href="#子网" class="headerlink" title="子网"></a>子网</h5><p>IP地址：<br>子网部分（高位bits）<br>主机部分（低位bits）<br>什么是子网？<br>一个子网内部的节点它们的IP地址的高位部分相同，这些节点构成的网络的一部分叫做子网<br>无需路由器介入，子网内各主机可以在物理上相互直接到达<br>方法：<br>要判断一个子网，将每一个接口从主机或者路由器上分开，构成了一个个网络的孤岛<br>每一个孤岛都是一个都可以被称为subnet</p><h5 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h5><p>子网部分：全为0–本网络<br>主机部分：全为0–本主机<br>主机部分：全为1–广播地址，这个网络的所有主机<br>内网专用IP地址<br>A类：10.0.0.0-10.255.255.255<br>B类：172.16.0.0-172.31.255.255<br>C类：192.168.0.0-192.168.255.255</p><h5 id="IP编址：CIDR"><a href="#IP编址：CIDR" class="headerlink" title="IP编址：CIDR"></a>IP编址：CIDR</h5><p>子网部分可以在任意的位置<br>地址格式：a.b.c.d/x，其中x是地址中子网号的长度</p><h5 id="如何获得一个IP地址"><a href="#如何获得一个IP地址" class="headerlink" title="如何获得一个IP地址"></a>如何获得一个IP地址</h5><p>系统管理员将地址配置在一个文件中<br>DHCP协议：从服务器中动态获得一个IP地址，DHCP是在UDP之上</p><p>如何获得一个网络的子网部分？<br>从ISP获得地址块中分配一个小地址块</p><h5 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h5><p>动机：<br>32-bits地址空间被用完<br>头部格式改变帮助加速处理和转发</p><p>数据报格式：<br>固定的40字节头部<br>数据报传输过程中，不允许分片</p><p>头部：<br>Priority标示流中数据报的优先级<br>Flow Label：标示数据报在一个“flow”<br>Next header：标示上层协议</p><p>和IPv4的其他变化：<br>Checksum被移除，降低在每一段中的处理速度<br>Options：允许，但是在头部之外，被“Next Header”字段标示<br>ICMPv6：ICMP的新版本，附加了报文类型，多播组管理功能</p><h3 id="4-4通用转发和SDN"><a href="#4-4通用转发和SDN" class="headerlink" title="4.4通用转发和SDN"></a>4.4通用转发和SDN</h3><h5 id="SDN：逻辑上集中的控制平面"><a href="#SDN：逻辑上集中的控制平面" class="headerlink" title="SDN：逻辑上集中的控制平面"></a>SDN：逻辑上集中的控制平面</h5><p>主要思路：<br>网络设备数据平面和控制平面分离<br>数据平面：分组交换机<br>控制平面：控制器+网络应用</p><p>相比于传统方式的优势：<br>水平集成控制平面的开放实现，创造出好的产业生态<br>集中式实现控制逻辑，网络管理容易<br>基于流表的匹配+行动的工作方式允许“可编程的”分组交换机</p><p>SDN的特点：<br>1.基于流的匹配+行动<br>2.控制平面和数据平面分离<br>3.控制平面功能在数据交换设备之外实现</p><p>SDN架构：<br><strong>数据平面交换机</strong><br>快速，简单，商业化交换设备，采用硬件实现通用转发功能<br>流表被控制器计算和安装<br>基于南向API，SDN控制器访问基于流的交换机<br>定义了和控制器的协议<br><strong>SDN控制器</strong><br>维护网络状态信息<br>通过上面的北向API和网络控制应用交互<br>通过下面的南向API和网络交换机交互<br>逻辑上集中，但是在实现上通常由于性能，可扩展性，容错性以及鲁棒性采用分布式方式<br><strong>控制应用</strong><br>控制的大脑：采用下层提供的服务（SDN控制器提供的API），实现网络功能（路由器，交换机，接入控制，防火墙，负载均衡）<br>非绑定：可以被第三方提供，与控制器厂商以通常上不同，与分组交换机厂商也可以不同</p><h2 id="第五章-网络层：控制平面"><a href="#第五章-网络层：控制平面" class="headerlink" title="第五章 网络层：控制平面"></a>第五章 网络层：控制平面</h2><blockquote><p>目标：理解网络层控制平面的工作原理</p></blockquote><h3 id="5-1路由选择算法"><a href="#5-1路由选择算法" class="headerlink" title="5.1路由选择算法"></a>5.1路由选择算法</h3><h5 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h5><p>路由协议的目标：确定从发送主机到接收主机之间，通过路由器的网络“较好”路径<br>路径：路由器的序列，分组将会沿着该序列从源主机到达最后的目标主机<br>“较好”：最小“代价”，“最快的”<br>路由：一个“top-10”网络挑战</p><h5 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h5><p>按照某种指标（传输延迟，所经过的站点数等）找到一条从源节点到目标节点的较好路径<br>路由器-路由器之间的最优路径 = 主机对之间的最优路径<br>路由选择算法：网络层软件的一部分，完成路由功能</p><h5 id="最优化原则"><a href="#最优化原则" class="headerlink" title="最优化原则"></a>最优化原则</h5><p>汇集树：<br>此节点到其他所有节点的最优路径形成的树<br>路由选择算法就是为所有路由器找到并使用汇集树</p><h5 id="路由的原则"><a href="#路由的原则" class="headerlink" title="路由的原则"></a>路由的原则</h5><p><strong>路由选择算法的原则</strong>：<br>正确性，简单性，健壮性（能适应通信量和网络拓扑的变化），稳定性，公平性，最优性（如果获得最优的代价较大可以选择次优）</p><h5 id="路由算法分类"><a href="#路由算法分类" class="headerlink" title="路由算法分类"></a>路由算法分类</h5><p><strong>全局</strong><br>所有的路由器拥有完整的拓扑和边的代价的信息<br>“link state”算法<br><strong>分布式</strong><br>路由器只知道与它有物理连接关系的邻居路由器，和到相应邻居路由器的代价值<br>迭代地与邻居交换路由信息，计算路由信息<br>“distance vector”算法</p><p><strong>静态</strong><br>路由随时间变化缓慢<br><strong>动态</strong><br>路由变化快</p><h5 id="LS路由的工作流程（link-state）"><a href="#LS路由的工作流程（link-state）" class="headerlink" title="LS路由的工作流程（link state）"></a>LS路由的工作流程（link state）</h5><p>获得网络拓扑和链路代价信息-&gt;使用最短路由算法得到路由表-&gt;使用此路由表<br>1.发现相邻节点，获知对方网络地址<br>2.测量到相邻节点的代价<br>3.组装一个LS分组，描述它到相邻节点的代价情况<br>4.将分组通过扩散的方法发到所有其它路由器<br>以上四步让每个路由器获得拓扑和边代价<br>5.通过Dijkstra算法找出最短路径<br>每个节点独立算出来到其他节点的最短路径<br>迭代算法：第k步能够知道本节点到k个节点的最短路径<br>ospf协议是一种LS协议</p><h5 id="LS路由选择算法的工作原理"><a href="#LS路由选择算法的工作原理" class="headerlink" title="LS路由选择算法的工作原理"></a>LS路由选择算法的工作原理</h5><p>节点标记：每一个节点使用（D（v），p（v））如：（3，B）标记<br>D（v）从源节点由已知最优路径到达本节点的距离<br>P（v）前序节点<br>2类节点：<br>临时节点：还没有找到从源节点到此节点的最优路径的节点<br>永久节点：已经找到了从源节点到此节点的最优路径的节点</p><p>初始化<br>除了源节点外，所有节点都为临时节点<br>节点代价除了与源节点代价相邻的节点外都为无穷大<br>从所有临时节点中找到一个节点代价最小的临时节点，将之变成永久节点W<br>对此节点的所有在临时节点集合中的邻节点（V）<br>如D（v）&gt;D（w）+c（w，v），则重新标注此点<br>再重新开始新的循环</p><h5 id="距离矢量路由选择的基本思想（distance-vector）"><a href="#距离矢量路由选择的基本思想（distance-vector）" class="headerlink" title="距离矢量路由选择的基本思想（distance vector）"></a>距离矢量路由选择的基本思想（distance vector）</h5><p>各路由器维护一张路由表<br>各路由与相邻路由器交换路由表<br>根据获得的路由信息，更新路由表</p><h5 id="距离矢量算法"><a href="#距离矢量算法" class="headerlink" title="距离矢量算法"></a>距离矢量算法</h5><p>核心思路：<br>每个节点都将自己的距离矢量估计值送给邻居，定时或者DV有变化时，让对方去算<br>当x从邻居收到DV时，自己运算，更新它自己的距离矢量<br>估计值最终收敛于实际最小代价值<br>异步式迭代：<br>迭代<br>本地链路代价变换时，从邻居来了DV的更新消息时<br>异步式<br>每个节点只是在自己的DV改变之后向邻居通告<br>DV的特点：<br>好消息传得快，坏消息传得慢<br>好消息的传播以每一个交换周期前进一个路由器的速度进行</p><h5 id="LS算法和DV算法比较"><a href="#LS算法和DV算法比较" class="headerlink" title="LS算法和DV算法比较"></a>LS算法和DV算法比较</h5><p>消息复杂度（DV胜出）<br>LS算法要在每个节点泛洪，DV算法只需要在邻居间传输<br>收敛时间（LS胜出）<br>LS是一次性的<br>DV算法要经过很多次迭代<br>健壮性（LS胜出）<br>LS：<br>节点会通告不正确的链路代价<br>每个节点只计算自己的路由表<br>错误信息影响较小，局部，路由较健壮<br>DV：<br>DV节点可能通告对全网所有节点的不正确路径代价<br>每一个节点的路由表可能被其他节点使用</p><h3 id="5-2因特网中自治系统内部的路由选择协议"><a href="#5-2因特网中自治系统内部的路由选择协议" class="headerlink" title="5.2因特网中自治系统内部的路由选择协议"></a>5.2因特网中自治系统内部的路由选择协议</h3><h5 id="RIP"><a href="#RIP" class="headerlink" title="RIP"></a>RIP</h5><p>使用DV算法<br>距离矢量，每条链路cost=1<br>DV每隔30秒和邻居交换DV<br>每个通告包括最多25个目标子网<br>如果180秒没有收到通告信息就代表邻居或者链路失效<br>RIP以应用进程的方式实现<br>通告报文通过UDP报文传送，周期性重复<br>网络层的协议使用了传输层的服务，以应用层的实体的方式实现</p><h5 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h5><p>使用LS算法<br>OSPF通告信息中携带：每一个邻居路由器一个表项<br>通告信息会传遍<br><strong>高级特性</strong><br>安全<br>允许有多个代价相同的路径存在<br>对于每一个链路，对于不同的TOS有多重代价矩阵<br>对单播和多播的集成支持<br>在大型网络中支持层次性OSPF<br>层次性的OSPF路由<br>2个级别的层次性：本地，骨干<br>链路状态通告仅仅在本地区域内进行<br>每一个节点拥有本地区域的拓扑信息<br>区域边界路由器：汇总到自己区域内网络的距离，向其他区域边界路由器通告<br>骨干路由器：仅仅在骨干区域内，允许OSPF路由<br>边界路由器：连接其他的ASs</p><h3 id="5-3ISP之间的路由BGP"><a href="#5-3ISP之间的路由BGP" class="headerlink" title="5.3ISP之间的路由BGP"></a>5.3ISP之间的路由BGP</h3><h5 id="层次路由"><a href="#层次路由" class="headerlink" title="层次路由"></a>层次路由</h5><p>一个平面的路由<br>一个网络中的所有路由器的地位一样<br>通过LS，DV，或者其他路由算法，所有路由器都要知道其他所有路由器如何走<br>所有路由器在一个平面<br>平面路由的问题<br>代价巨大<br>管理困难<br><strong>层次路由</strong>：<br>将互联网分成一个个AS（区域）<br>每个区域内的路由器集合，自治<br>一个AS用ASN唯一标识<br>一个ISP可能包括一个或多个AS<br>路由变成了：两个层次路由<br>AS内部路由<br>AS间运行AS间路由协议<br><strong>优点</strong><br>解决了规模问题<br>内部网关协议解决：AS内部数量有限的路由器相互到达的问题<br>AS之间的路由的规模问题<br>解决了管理问题<br>各个AS可以运行不同的内部网关协议<br>可以使自己网络的细节不向外透露</p><h5 id="BGP"><a href="#BGP" class="headerlink" title="BGP"></a>BGP</h5><p>BGP：自治区域间路由协议事实上的标准<br>BGP提供给每个AS以一下方法：<br>eBGP：从相邻的ASes那里获得子网可达信息<br>iBGP：将获得的子网可达信息传遍到AS内部的所有路由器<br>根据子网可达信息和策略来决定到达子网的好路径<br>允许子网向互联网其他网络通告“我在这里”<br>基于距离矢量算法</p><h5 id="BGP基础"><a href="#BGP基础" class="headerlink" title="BGP基础"></a>BGP基础</h5><p>BGP会话：2个BGP路由器在一个半永久的YCP连接上交换BGP报文<br>通告向不同目标子网前缀的“路径”</p><h5 id="BGP属性"><a href="#BGP属性" class="headerlink" title="BGP属性"></a>BGP属性</h5><p>AS-PATH：前缀的通告所经过的AS列表<br>检测环路：多路径选择<br>在向其他AS转发时，需要将自己的AS号加在路径上<br>NEXT-HOP：从当前AS到下一跳AS有多少个链路，在NEXT-HOP属性中，告诉对方通过哪个I转发</p><h5 id="BGP报文"><a href="#BGP报文" class="headerlink" title="BGP报文"></a>BGP报文</h5><p>使用TCP协议交换BGP报文<br>BGP报文：<br>OPEN：打开TCP连接，认证发送方<br>UPDATE：通告新路径<br>KEEPALIVE：在没有更新时保持连接，也用于对OPEN请求确认<br>NOTIFICATION：报告以前消息的错误，也用来关闭连接</p><h5 id="BGP路径选择"><a href="#BGP路径选择" class="headerlink" title="BGP路径选择"></a>BGP路径选择</h5><p>1.本地偏好值属性：偏好策略决定<br>2.最短AS-PATH：AS的跳数<br>3.最近的NEXT-HOP路由器：热土豆路由<br>4.附加的判断：使用BGP标示</p><h5 id="为什么内部网关协议与外部网关协议如此不同？"><a href="#为什么内部网关协议与外部网关协议如此不同？" class="headerlink" title="为什么内部网关协议与外部网关协议如此不同？"></a>为什么内部网关协议与外部网关协议如此不同？</h5><p>策略：<br>Inter-AS：管理员需要控制通信路径，谁在使用它的网络继续数据传输<br>Intra-AS：一个管理员，所以无需策略<br>规模：<br>AS间路由必须考虑规模问题，以便支持全网的数据转发<br>AS内部路由规模不是一个大的问题（如果AS太大可以分成小的AS）<br>性能：<br>Intra-AS：关注性能<br>Inter-AS：策略可能比性能更重要</p><h3 id="5-4SDN控制平面"><a href="#5-4SDN控制平面" class="headerlink" title="5.4SDN控制平面"></a>5.4SDN控制平面</h3><p>为什么需要一个逻辑上集中的控制平面？<br>网络管理更容易：避免路由器的错误配置，对于通信流的弹性更好<br>基于流表的转发，允许“可编程”路由器<br>控制平面的开放实现</p><h2 id="第六章-数据链路层和局域网"><a href="#第六章-数据链路层和局域网" class="headerlink" title="第六章 数据链路层和局域网"></a>第六章 数据链路层和局域网</h2><blockquote><p>目标:理解数据链路层服务的原理：纠错、多点接入、寻址、LAN、可、rdt，流量控制。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2023/04/07/test/"/>
      <url>/2023/04/07/test/</url>
      
        <content type="html"><![CDATA[<p>sadsadas</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/* 翻页按钮居中 */#pagination {    width: 100%;    margin: auto;  }/* 一级菜单居中 */#nav .menus_items {    position: absolute !important;    width: fit-content !important;    left: 50% !important;    transform: translateX(-50%) !important;  }  /* 子菜单横向展示 */  #nav .menus_items .menus_item:hover .menus_item_child {    display: flex !important;  }  /* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */  .menus_items .menus_item:nth-child(2) .menus_item_child {    left: -125px;  }  :root {    --trans-light: rgba(255, 255, 255, 0.88);    --trans-dark: rgba(25, 25, 25, 0.88);    --border-style: 1px solid rgb(169, 169, 169);    --backdrop-filter: blur(5px) saturate(150%);  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 25px;    border: var(--border-style);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 18px;    border: var(--border-style);  }    /* 文章页、归档页、普通页面 */  div#post,  div#page,  div#archive {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border: var(--border-style);    border-radius: 20px;  }    /* 导航栏 */  #page-header.nav-fixed #nav {    background: rgba(255, 255, 255, 0.75);    backdrop-filter: var(--backdrop-filter);  }    [data-theme="dark"] #page-header.nav-fixed #nav {    background: rgba(0, 0, 0, 0.7) !important;  }    /* 夜间模式遮罩 */  [data-theme="dark"] #recent-posts > .recent-post-item,  [data-theme="dark"] #aside-content .card-widget,  [data-theme="dark"] div#post,  [data-theme="dark"] div#archive,  [data-theme="dark"] div#page {    background: var(--trans-dark);  }      /* 夜间模式页脚页头遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }    /* 阅读模式 */  .read-mode #aside-content .card-widget {    background: rgba(158, 204, 171, 0.5) !important;  }  .read-mode div#post {    background: rgba(158, 204, 171, 0.5) !important;  }    /* 夜间模式下的阅读模式 */  [data-theme="dark"] .read-mode #aside-content .card-widget {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  [data-theme="dark"] .read-mode div#post {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/progress_bar.css"/>
      <url>/css/progress_bar.css</url>
      
        <content type="html"><![CDATA[.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 4px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 7rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden}.pace-inactive .pace-progress {    opacity: 0;    transition: .3s ease-in}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    /* linear-gradient(to right, #3494e6, #ec6ead) */    background: linear-gradient(to right, #43cea2, #3866ca);    animation: gradient 2s ease infinite;    background-size: 200%}.pace.pace-inactive {    opacity: 0;    transition: .3s;    top: -8px}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
